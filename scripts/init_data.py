"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ë–î –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–º–∏.
–ó–∞–ø—É—Å–∫: python scripts/init_data.py
"""
import asyncio
import sys
from pathlib import Path

from services import master_service

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from database.engine import DatabaseManager, get_session
from database.base import BaseModel
from models import *
from services.skill_service import SkillService
from services.master_service import MasterService
from sqlalchemy import insert

factory = DatabaseManager()

async def create_initial_skills(skill_service: SkillService):
    """–°–æ–∑–¥–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏"""
    skills_data = [
        {
            "name": "–°—Ç–∏—Ä–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã",
            "description": "–†–µ–º–æ–Ω—Ç —Å—Ç–∏—Ä–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω –≤—Å–µ—Ö –º–∞—Ä–æ–∫"
        },
        {
            "name": "–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∏",
            "description": "–†–µ–º–æ–Ω—Ç –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–æ–≤"
        },
        {
            "name": "–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä—ã",
            "description": "–£—Å—Ç–∞–Ω–æ–≤–∫–∞, —Ä–µ–º–æ–Ω—Ç –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–æ–≤"
        },
        {
            "name": "–ü–æ—Å—É–¥–æ–º–æ–µ—á–Ω—ã–µ –º–∞—à–∏–Ω—ã",
            "description": "–†–µ–º–æ–Ω—Ç –ø–æ—Å—É–¥–æ–º–æ–µ—á–Ω—ã—Ö –º–∞—à–∏–Ω"
        },
        {
            "name": "–ú–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∏",
            "description": "–†–µ–º–æ–Ω—Ç –º–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤—ã—Ö –ø–µ—á–µ–π"
        },
        {
            "name": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª",
            "description": "–†–µ–º–æ–Ω—Ç –ª—é–±–æ–π –±—ã—Ç–æ–≤–æ–π —Ç–µ—Ö–Ω–∏–∫–∏"
        },
        {
            "name": "–í–∞—Ä–æ—á–Ω–∞—è –ø–∞–Ω–µ–ª—å",
            "description": "–†–µ–º–æ–Ω—Ç –≤–∞—Ä–æ—á–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π"
        },
        {
            "name": "–î—É—Ö–æ–≤–æ–π —à–∫–∞—Ñ",
            "description": "–†–µ–º–æ–Ω—Ç –¥—É—Ö–æ–≤—ã—Ö —à–∫–∞—Ñ–æ–≤"
        }
    ]
    
    created_skills = []
    for skill_data in skills_data:
        skill = await skill_service.create_skill(**skill_data)
        created_skills.append(skill)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–∞–≤—ã–∫: {skill.name}")
    
    return created_skills


async def create_demo_masters(skills, session):
    """–°–æ–∑–¥–∞—Ç—å –¥–µ–º–æ-–º–∞—Å—Ç–µ—Ä–æ–≤"""
    from models import Master
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –Ω–∞–≤—ã–∫–æ–≤ –ø–æ –∏–º–µ–Ω–∏
    skill_map = {skill.name: skill.id for skill in skills}
    
    masters_data = [
        {
            "name": "–†—É—Å—Ç–∞–º 50/50",
            "telegram_id": 7388574158,
            "phone": "+998901234567",
            "skill_names": ["–°—Ç–∏—Ä–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã", "–ü–æ—Å—É–¥–æ–º–æ–µ—á–Ω—ã–µ –º–∞—à–∏–Ω—ã", "–í–∞—Ä–æ—á–Ω–∞—è –ø–∞–Ω–µ–ª—å"]
        },
        {
            "name": "–î–∞–Ω–∏–ª–∞",
            "telegram_id": 1066527048,
            "phone": "+998901234568",
            "skill_names": ["–°—Ç–∏—Ä–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã"]
        },
        {
            "name": "–≠–¥—É–∞—Ä–¥",
            "telegram_id": 1727377979,
            "phone": "+998901234569",
            "skill_names": ["–°—Ç–∏—Ä–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã"]
        },
        {
            "name": "–ü–ª–∞—Ç–æ–Ω–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä",
            "telegram_id": 5041337189,
            "phone": "+998901234570",
            "skill_names": ["–ü–æ—Å—É–¥–æ–º–æ–µ—á–Ω—ã–µ –º–∞—à–∏–Ω—ã", "–°—Ç–∏—Ä–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã"]
        },
        {
            "name": "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–∞—Ä—Ñ–µ–Ω–æ–≤",
            "telegram_id": 5361679073,
            "phone": "+998901234571",
            "skill_names": ["–°—Ç–∏—Ä–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã", "–ü–æ—Å—É–¥–æ–º–æ–µ—á–Ω—ã–µ –º–∞—à–∏–Ω—ã"]
        },
        {
            "name": "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä (–°–ê–ù–ß–ò–ó)",
            "telegram_id": 704381585,
            "phone": "+998901234572",
            "skill_names": ["–£–Ω–∏–≤–µ—Ä—Å–∞–ª", "–°—Ç–∏—Ä–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã", "–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∏", "–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä—ã", 
                           "–ü–æ—Å—É–¥–æ–º–æ–µ—á–Ω—ã–µ –º–∞—à–∏–Ω—ã", "–ú–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∏", "–í–∞—Ä–æ—á–Ω–∞—è –ø–∞–Ω–µ–ª—å", "–î—É—Ö–æ–≤–æ–π —à–∫–∞—Ñ"]
        },
        {
            "name": "–ö–æ–Ω—É—Ö–æ–≤ –ú–∞–∫—Å–∏–º",
            "telegram_id": 777332150,
            "phone": "+998901234573",
            "skill_names": ["–°—Ç–∏—Ä–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã", "–ü–æ—Å—É–¥–æ–º–æ–µ—á–Ω—ã–µ –º–∞—à–∏–Ω—ã", "–í–∞—Ä–æ—á–Ω–∞—è –ø–∞–Ω–µ–ª—å", 
                           "–î—É—Ö–æ–≤–æ–π —à–∫–∞—Ñ", "–ú–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∏"]
        },
        {
            "name": "–õ–∞–∑–∞—Ä–µ–≤ –ì—Ä–∏–≥–æ—Ä–∏–π –°–µ—Ä–≥–µ–µ–≤–∏—á",
            "telegram_id": 2143023737,
            "phone": "+998901234574",
            "skill_names": ["–°—Ç–∏—Ä–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã", "–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∏", "–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä—ã", "–ü–æ—Å—É–¥–æ–º–æ–µ—á–Ω—ã–µ –º–∞—à–∏–Ω—ã", 
                           "–ú–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∏", "–£–Ω–∏–≤–µ—Ä—Å–∞–ª", "–í–∞—Ä–æ—á–Ω–∞—è –ø–∞–Ω–µ–ª—å", "–î—É—Ö–æ–≤–æ–π —à–∫–∞—Ñ"]
        },
        {
            "name": "–î–∞–Ω–∏–∏–ª –†—ã—Å–∫–∞–ª—å",
            "telegram_id": 1846886236,
            "phone": "+998901234575",
            "skill_names": ["–°—Ç–∏—Ä–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã", "–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∏", "–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä—ã", "–ü–æ—Å—É–¥–æ–º–æ–µ—á–Ω—ã–µ –º–∞—à–∏–Ω—ã", 
                           "–£–Ω–∏–≤–µ—Ä—Å–∞–ª", "–í–∞—Ä–æ—á–Ω–∞—è –ø–∞–Ω–µ–ª—å", "–ú–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∏", "–î—É—Ö–æ–≤–æ–π —à–∫–∞—Ñ"]
        },
        {
            "name": "–ü–æ–∑–¥–Ω—è–∫–æ–≤ –ü–∞–≤–µ–ª",
            "telegram_id": 5180625824,
            "phone": "+998901234576",
            "skill_names": ["–î—É—Ö–æ–≤–æ–π —à–∫–∞—Ñ", "–í–∞—Ä–æ—á–Ω–∞—è –ø–∞–Ω–µ–ª—å", "–°—Ç–∏—Ä–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã", 
                           "–ü–æ—Å—É–¥–æ–º–æ–µ—á–Ω—ã–µ –º–∞—à–∏–Ω—ã", "–ú–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∏"]
        },
        {
            "name": "–î–µ—è–Ω—ã—à–µ–≤ –ú–∞–∫—Å–∏–º",
            "telegram_id": 580804505,
            "phone": "+998901234577",
            "skill_names": ["–°—Ç–∏—Ä–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã", "–ü–æ—Å—É–¥–æ–º–æ–µ—á–Ω—ã–µ –º–∞—à–∏–Ω—ã"]
        },
        {
            "name": "–ê–ª–µ–∫—Å–µ–µ–≤ –°–µ—Ä–≥–µ–π",
            "telegram_id": 5428559076,
            "phone": "+998901234578",
            "skill_names": ["–°—Ç–∏—Ä–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã"]
        }
    ]
    
    created_masters = []
    for master_data in masters_data:
        # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞ –±–µ–∑ –Ω–∞–≤—ã–∫–æ–≤
        basic_data = {
            "name": master_data["name"],
            "telegram_id": master_data["telegram_id"],
            "phone": master_data["phone"]
        }
        master = await master_service.create_master(**basic_data)
        created_masters.append(master)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∏ —Å –Ω–∞–≤—ã–∫–∞–º–∏
        skill_ids = [skill_map[name] for name in master_data["skill_names"] if name in skill_map]
        for sid in skill_ids:
            stmt = insert(master_skills).values(master_id=master.id, skill_id=sid)
            await session.execute(stmt)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º–µ–Ω–∞ –Ω–∞–≤—ã–∫–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞
        skill_names_str = ", ".join(master_data["skill_names"])
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –º–∞—Å—Ç–µ—Ä: {master.name} (–Ω–∞–≤—ã–∫–∏: {skill_names_str})")
    
    return created_masters


async def main():
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n")
    
    # –ü–æ–ª—É—á–∞–µ–º engine
    engine = await factory.get_engine()
    
    # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É –ë–î
    metadata = BaseModel.metadata
    async with engine.begin() as conn:
        await conn.run_sync(metadata.drop_all)
        await conn.run_sync(metadata.create_all)
    print("‚úÖ –°—Ö–µ–º–∞ –ë–î –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞.\n")
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏
    async with get_session() as session:
        skill_service = SkillService(session)
        master_service = MasterService(session)
        
        print("üìö –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤...")
        skills = await create_initial_skills(skill_service)
        
        print("\nüë• –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–æ–≤...")
        masters = await create_demo_masters(master_service, skills, session)
        
        await session.commit()
        
        print(f"\n‚úÖ –ì–æ—Ç–æ–≤–æ!")
        print(f"   –°–æ–∑–¥–∞–Ω–æ –Ω–∞–≤—ã–∫–æ–≤: {len(skills)}")
        print(f"   –°–æ–∑–¥–∞–Ω–æ –º–∞—Å—Ç–µ—Ä–æ–≤: {len(masters)}")


if __name__ == "__main__":
    asyncio.run(main())