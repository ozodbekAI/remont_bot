"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ë–î –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–º–∏.
–ó–∞–ø—É—Å–∫: python scripts/init_data.py
"""
import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from database.engine import DatabaseManager
from database.base import BaseModel
from models import *  # –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ metadata
from services.services import SkillService, MasterService
from sqlalchemy import insert

factory = DatabaseManager()

async def create_initial_skills(skill_service: SkillService):
    """–°–æ–∑–¥–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏"""
    skills_data = [
        {
            "name": "–°—Ç–∏—Ä–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã",
            "description": "–†–µ–º–æ–Ω—Ç —Å—Ç–∏—Ä–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω –≤—Å–µ—Ö –º–∞—Ä–æ–∫"
        },
        {
            "name": "–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∏",
            "description": "–†–µ–º–æ–Ω—Ç –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–æ–≤"
        },
        {
            "name": "–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä—ã",
            "description": "–£—Å—Ç–∞–Ω–æ–≤–∫–∞, —Ä–µ–º–æ–Ω—Ç –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–æ–≤"
        },
        {
            "name": "–ü–æ—Å—É–¥–æ–º–æ–µ—á–Ω—ã–µ –º–∞—à–∏–Ω—ã",
            "description": "–†–µ–º–æ–Ω—Ç –ø–æ—Å—É–¥–æ–º–æ–µ—á–Ω—ã—Ö –º–∞—à–∏–Ω"
        },
        {
            "name": "–ú–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∏",
            "description": "–†–µ–º–æ–Ω—Ç –º–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤—ã—Ö –ø–µ—á–µ–π"
        },
        {
            "name": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª",
            "description": "–†–µ–º–æ–Ω—Ç –ª—é–±–æ–π –±—ã—Ç–æ–≤–æ–π —Ç–µ—Ö–Ω–∏–∫–∏"
        }
    ]
    
    created_skills = []
    for skill_data in skills_data:
        skill = await skill_service.create_skill(**skill_data)
        created_skills.append(skill)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–∞–≤—ã–∫: {skill.name}")
    
    return created_skills


async def create_demo_masters(master_service: MasterService, skills, session):
    """–°–æ–∑–¥–∞—Ç—å –¥–µ–º–æ-–º–∞—Å—Ç–µ—Ä–æ–≤"""
    masters_data = [
        {
            "name": "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω",
            "telegram_id": 111111111,  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID
            "phone": "+998901234567",
            "skill_ids": [skills[0].id, skills[5].id]  # –°—Ç–∏—Ä–∞–ª–∫–∏ + –£–Ω–∏–≤–µ—Ä—Å–∞–ª
        },
        {
            "name": "–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä",
            "telegram_id": 222222222,  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID
            "phone": "+998901234568",
            "skill_ids": [skills[1].id, skills[2].id]  # –•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∏ + –ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä—ã
        },
        {
            "name": "–°–∏–¥–æ—Ä–æ–≤ –°–∏–¥–æ—Ä",
            "telegram_id": 333333333,  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID
            "phone": "+998901234569",
            "skill_ids": [skills[5].id]  # –£–Ω–∏–≤–µ—Ä—Å–∞–ª
        }
    ]
    
    created_masters = []
    for master_data in masters_data:
        # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞ –±–µ–∑ –Ω–∞–≤—ã–∫–æ–≤
        basic_data = {k: v for k, v in master_data.items() if k != "skill_ids"}
        master = await master_service.create_master(**basic_data)
        created_masters.append(master)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∏ —Å –Ω–∞–≤—ã–∫–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é –≤ —Ç–∞–±–ª–∏—Ü—É many-to-many
        skill_ids = master_data["skill_ids"]
        for sid in skill_ids:
            stmt = insert(master_skills).values(master_id=master.id, skill_id=sid)
            await session.execute(stmt)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º–µ–Ω–∞ –Ω–∞–≤—ã–∫–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞
        skill_names = ", ".join(s.name for s in skills if s.id in skill_ids)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –º–∞—Å—Ç–µ—Ä: {master.name} (–Ω–∞–≤—ã–∫–∏: {skill_names})")
    
    return created_masters


async def main():
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n")
    
    # –ü–æ–ª—É—á–∞–µ–º engine
    engine = await factory.get_engine()
    
    metadata = BaseModel.metadata
    async with engine.begin() as conn:
        await conn.run_sync(metadata.drop_all)
        await conn.run_sync(metadata.create_all)
    print("‚úÖ –°—Ö–µ–º–∞ –ë–î –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞.\n")
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏
    from database.engine import get_session
    async with get_session() as session:
        skill_service = SkillService(session)
        master_service = MasterService(session)
        
        print("\nüìö –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤...")
        skills = await create_initial_skills(skill_service)
        
        # print("\nüë• –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–æ–≤...")
        # masters = await create_demo_masters(master_service, skills, session)
        
        
        await session.commit()
        
        print(f"\n‚úÖ –ì–æ—Ç–æ–≤–æ!")
        print(f"   –°–æ–∑–¥–∞–Ω–æ –Ω–∞–≤—ã–∫–æ–≤: {len(skills)}")
        # print(f"   –°–æ–∑–¥–∞–Ω–æ –º–∞—Å—Ç–µ—Ä–æ–≤: {len(masters)}")
        print("\n‚ö†Ô∏è  –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–∏—Ç–µ Telegram ID –º–∞—Å—Ç–µ—Ä–æ–≤ –≤ –∫–æ–¥–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ!")


if __name__ == "__main__":
    asyncio.run(main())