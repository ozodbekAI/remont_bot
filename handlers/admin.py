from datetime import datetime, date, timedelta
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, BufferedInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
import pandas as pd
import io
from core.keyboards import (
    admin_main_kb, order_status_kb, filters_kb, masters_menu_kb,
    skills_checkbox_kb, master_update_selection_kb, master_delete_selection_kb,
    master_update_menu_kb, master_delete_confirm_kb, reports_menu_kb,
    period_selection_kb, manual_master_selection_kb
)
from core.utils import validate_phone
from services.services import (
    OrderService, MasterService,
    SkillService, ReportService
)
from models import OrderStatus
from filters.role import RoleFilter
router = Router()
# ==================== FSM States ====================
class AdminStates(StatesGroup):
    # –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞
    waiting_client_name = State()
    waiting_phone = State()
    waiting_address = State()
    waiting_datetime = State()
    waiting_skills = State() # –ù–û–í–û–ï: –≤—ã–±–æ—Ä –Ω–∞–≤—ã–∫–æ–≤
    waiting_type = State()
    waiting_brand = State()
    waiting_model = State()
    waiting_comment = State()
    manual_master_selection = State() # –ù–û–í–û–ï: —Ä—É—á–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞
   
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–∞
    adding_skill_name = State()
    adding_skill_description = State()
   
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞
    adding_master_name = State()
    adding_master_phone = State()
    adding_master_telegram = State()
    adding_master_skills = State()
   
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞
    selecting_master_to_update = State()
    updating_master_name = State()
    updating_master_phone = State()
    updating_master_telegram = State()
    updating_master_skills = State()
   
    # –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞
    selecting_master_to_delete = State()
    confirming_delete = State()
    # –û—Ç—á–µ—Ç—ã (–Ω–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è)
    selecting_report_type = State()
    selecting_period = State()
    waiting_date_from = State()
    waiting_date_to = State()
    selecting_master_filter = State() # –§–∏–ª—å—Ç—Ä –ø–æ –º–∞—Å—Ç–µ—Ä—É –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
# ==================== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ====================
@router.message(F.text == "/start", RoleFilter("admin"))
async def admin_start(msg: Message, state: FSMContext):
    await state.clear()
    await msg.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_main_kb()
    )
# ==================== –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ====================
@router.message(F.text == "üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞")
async def new_order_start(msg: Message, state: FSMContext):
    await state.clear() # Clear any previous state
    await state.set_state(AdminStates.waiting_client_name)
    await msg.answer("üìù –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:")
@router.message(AdminStates.waiting_client_name)
async def process_client_name(msg: Message, state: FSMContext):
    await state.update_data(client_name=msg.text.strip())
    await state.set_state(AdminStates.waiting_phone)
    await msg.answer("üìû –í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: +79181234567):")
@router.message(AdminStates.waiting_phone)
async def process_phone(msg: Message, state: FSMContext):
    phone = msg.text.strip()
    if not validate_phone(phone):
        await msg.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
            "–ü—Ä–∏–º–µ—Ä: +79181234567\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        return
   
    await state.update_data(phone=phone)
    await state.set_state(AdminStates.waiting_address)
    await msg.answer("üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–∏—Ä–∞–±–∞–¥—Å–∫–∏–π —Ä–∞–π–æ–Ω, —É–ª. –ê–≤–∏–∞—Å–æ–∑–ª–∞—Ä 12):")
@router.message(AdminStates.waiting_address)
async def process_address(msg: Message, state: FSMContext):
    await state.update_data(address=msg.text.strip())
    await state.set_state(AdminStates.waiting_datetime)
    await msg.answer(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤–∏–∑–∏—Ç–∞\n"
        "–§–æ—Ä–º–∞—Ç: YYYY-MM-DD HH:MM\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 2025-10-15 14:00"
    )
@router.message(AdminStates.waiting_datetime)
async def process_datetime(msg: Message, state: FSMContext, skill_service: SkillService):
    dt_str = msg.text.strip()
    try:
        dt = datetime.strptime(dt_str, "%Y-%m-%d %H:%M")
        if dt < datetime.now():
            await msg.answer("‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
       
        await state.update_data(datetime=dt)
       
        # –ù–û–í–û–ï: –í—ã–±–æ—Ä –Ω–∞–≤—ã–∫–æ–≤
        await state.set_state(AdminStates.waiting_skills)
        kb = await skills_checkbox_kb()
        await msg.answer(
            "üîß –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞–≤—ã–∫–∏ –¥–ª—è –∑–∞—è–≤–∫–∏:\n"
            "(–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ)",
            reply_markup=kb
        )
    except ValueError:
        await msg.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n"
            "–ü—Ä–∏–º–µ—Ä: 2025-10-15 14:00\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
@router.callback_query(F.data.startswith("skill_toggle_"), AdminStates.waiting_skills)
async def toggle_order_skill(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏"""
    skill_id = int(callback.data.split("_")[2])
    data = await state.get_data()
    selected = data.get("selected_skills", [])
   
    if skill_id in selected:
        selected.remove(skill_id)
    else:
        selected.append(skill_id)
   
    await state.update_data(selected_skills=selected)
   
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    kb = await skills_checkbox_kb(selected)
    await callback.message.edit_reply_markup(reply_markup=kb)
    await callback.answer()
@router.callback_query(F.data == "skills_done", AdminStates.waiting_skills)
async def skills_done(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –Ω–∞–≤—ã–∫–æ–≤"""
    data = await state.get_data()
    if not data.get("selected_skills"):
        await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –Ω–∞–≤—ã–∫!", show_alert=True)
        return
   
    await state.set_state(AdminStates.waiting_type)
    await callback.message.edit_text("üîß –í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Å—Ç–∏—Ä–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞, —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫):")
    await callback.answer()
@router.message(AdminStates.waiting_type)
async def process_type(msg: Message, state: FSMContext):
    await state.update_data(type=msg.text.strip())
    await state.set_state(AdminStates.waiting_brand)
    await msg.answer("üè∑Ô∏è –í–≤–µ–¥–∏—Ç–µ –±—Ä–µ–Ω–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: Samsung, LG, Artel):")
@router.message(AdminStates.waiting_brand)
async def process_brand(msg: Message, state: FSMContext):
    await state.update_data(brand=msg.text.strip())
    await state.set_state(AdminStates.waiting_model)
    await msg.answer("üì± –í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å:")
@router.message(AdminStates.waiting_model)
async def process_model(msg: Message, state: FSMContext):
    await state.update_data(model=msg.text.strip())
    await state.set_state(AdminStates.waiting_comment)
    await msg.answer("üí¨ –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:")
# Admin.py faylidagi create_order handlerini tekshiring va to'g'rilang:
@router.message(AdminStates.waiting_comment)
async def create_order(msg: Message, state: FSMContext, order_service: OrderService, bot: Bot, master_service: MasterService):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ–º –º–∞—Å—Ç–µ—Ä–∞"""
    data = await state.get_data()
   
    # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –∏ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–∑–Ω–∞—á–∏—Ç—å
    order, assigned = await order_service.create_order(
        client_name=data["client_name"],
        phone=data["phone"],
        address=data["address"],
        datetime=data["datetime"],
        type=data["type"],
        brand=data["brand"],
        model=data["model"],
        comment=msg.text.strip(),
        skill_ids=data.get("selected_skills", [])
    )
   
    if assigned:
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–ø–æ—Å–ª–µ commit –≤ —Å–µ—Ä–≤–∏—Å–µ)
        assignment = await order_service.assignment_repo.get_by_order(order.id)
        master = assignment.master if assignment else None
        if master:
            await msg.answer(
                f"‚úÖ –ó–∞—è–≤–∫–∞ #{order.number} —Å–æ–∑–¥–∞–Ω–∞!\n"
                f"üë§ –ù–∞–∑–Ω–∞—á–µ–Ω –º–∞—Å—Ç–µ—Ä: {master.name}\n"
                f"üìÖ –í—Ä–µ–º—è: {order.datetime.strftime('%d.%m.%Y %H:%M')}",
                reply_markup=admin_main_kb()
            )
           
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—É - –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º order.id –≤–º–µ—Å—Ç–æ order_id
            await bot.send_message(
                master.telegram_id,
                f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{order.number}!\n\n"
                f"üë§ –ö–ª–∏–µ–Ω—Ç: {order.client_name}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.phone}\n"
                f"üìç –ê–¥—Ä–µ—Å: {order.address}\n"
                f"üìÖ –í—Ä–µ–º—è: {order.datetime.strftime('%d.%m.%Y %H:%M')}\n"
                f"üîß –¢–µ—Ö–Ω–∏–∫–∞: {order.type} {order.brand} {order.model}\n"
                f"üí¨ –ü—Ä–æ–±–ª–µ–º–∞: {order.comment}",
                reply_markup=order_status_kb(order.id, order.status) # –ò–°–ü–†–ê–í–õ–ï–ù–û
            )
            await state.clear() # –ò–°–ü–†–ê–í–õ–ï–ù–û: –æ—á–∏—â–∞–µ–º state –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
    else:
        # –ù–û–í–û–ï: –ï—Å–ª–∏ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä—É—á–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
        await state.update_data(order_id=order.id, order_number=order.number, order_datetime=order.datetime)
        await state.set_state(AdminStates.manual_master_selection)
        kb = await manual_master_selection_kb(order.id)
        await msg.answer(
            f"‚ö†Ô∏è –ó–∞—è–≤–∫–∞ #{order.number} —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞!\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:",
            reply_markup=kb
        )
# –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ manual_assign_master_from_creation handler:
@router.callback_query(F.data.startswith("assign_manual_"), AdminStates.manual_master_selection)
async def manual_assign_master_from_creation(
    callback: CallbackQuery,
    state: FSMContext,
    order_service: OrderService,
    master_service: MasterService,
    bot: Bot
):
    """–†—É—á–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏"""
    parts = callback.data.split("_")
    master_id = int(parts[2])
    order_id = int(parts[3])
   
    master = await master_service.master_repo.get(master_id)
    if not master:
        await callback.answer("‚ùå –ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
   
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω —É–∂–µ
    existing = await order_service.assignment_repo.get_by_order(order_id)
    if existing:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞!", show_alert=True)
        await state.clear()
        return
   
    # –ù–∞–∑–Ω–∞—á–∞–µ–º
    await order_service.assignment_repo.create(order_id=order_id, master_id=master_id)
    order = await order_service.order_repo.get(order_id)
    order.status = OrderStatus.confirmed
    await master_service.update_schedule(master_id, order.datetime, "busy")
    await order_service.session.commit()
   
    data = await state.get_data()
    await callback.message.edit_text(
        f"‚úÖ –ú–∞—Å—Ç–µ—Ä {master.name} –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –∑–∞—è–≤–∫—É #{data.get('order_number', order.number)}!\n"
        f"üìÖ –í—Ä–µ–º—è: {data.get('order_datetime', order.datetime).strftime('%d.%m.%Y %H:%M')}"
    )
   
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—É - –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º order.id –∏ order.status
    await bot.send_message(
        master.telegram_id,
        f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{order.number}!\n\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: {order.client_name}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.phone}\n"
        f"üìç –ê–¥—Ä–µ—Å: {order.address}\n"
        f"üìÖ –í—Ä–µ–º—è: {order.datetime.strftime('%d.%m.%Y %H:%M')}\n"
        f"üîß –¢–µ—Ö–Ω–∏–∫–∞: {order.type} {order.brand} {order.model}\n"
        f"üí¨ –ü—Ä–æ–±–ª–µ–º–∞: {order.comment}",
        reply_markup=order_status_kb(order.id, order.status) # –ò–°–ü–†–ê–íL–ï–ù–û
    )
   
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_main_kb())
    await state.clear()
    await callback.answer()
# Shuningdek manual_assign_master_from_reject handlerini ham tekshiring:
@router.callback_query(F.data.startswith("assign_manual_"))
async def manual_assign_master_from_reject(
    callback: CallbackQuery,
    order_service: OrderService,
    master_service: MasterService,
    bot: Bot
):
    """–†—É—á–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ –ø–æ—Å–ª–µ –æ—Ç–∫–∞–∑–∞ (–ë–ï–ó STATE)"""
    parts = callback.data.split("_")
    master_id = int(parts[2])
    order_id = int(parts[3])
   
    master = await master_service.master_repo.get(master_id)
    if not master:
        await callback.answer("‚ùå –ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
   
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–∫–∞–∑ –µ—â–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω
    existing = await order_service.assignment_repo.get_by_order(order_id)
    if existing:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥—Ä—É–≥–æ–º—É –º–∞—Å—Ç–µ—Ä—É!", show_alert=True)
        await callback.message.edit_text(
            f"‚ö†Ô∏è –ó–∞—è–≤–∫–∞ #{order_id} —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞.\n"
            f"–ú–∞—Å—Ç–µ—Ä: {existing.master.name}"
        )
        return
   
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
    order = await order_service.order_repo.get(order_id)
    if not order:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
   
    # –ù–∞–∑–Ω–∞—á–∞–µ–º
    await order_service.assignment_repo.create(order_id=order_id, master_id=master_id)
    order.status = OrderStatus.confirmed
    await master_service.update_schedule(master_id, order.datetime, "busy")
    await order_service.session.commit()
   
    await callback.message.edit_text(
        f"‚úÖ –ú–∞—Å—Ç–µ—Ä {master.name} –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –∑–∞—è–≤–∫—É #{order.number}!\n"
        f"üìÖ –í—Ä–µ–º—è: {order.datetime.strftime('%d.%m.%Y %H:%M')}\n\n"
        f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–∞—Å—Ç–µ—Ä—É."
    )
   
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—É - –ò–°–ü–†–ê–í–õ–ï–ù–û: order.id va order.status
    await bot.send_message(
        master.telegram_id,
        f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{order.number}!\n\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: {order.client_name}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.phone}\n"
        f"üìç –ê–¥—Ä–µ—Å: {order.address}\n"
        f"üìÖ –í—Ä–µ–º—è: {order.datetime.strftime('%d.%m.%Y %H:%M')}\n"
        f"üîß –¢–µ—Ö–Ω–∏–∫–∞: {order.type} {order.brand} {order.model}\n"
        f"üí¨ –ü—Ä–æ–±–ª–µ–º–∞: {order.comment}",
        reply_markup=order_status_kb(order.id, order.status) # –ò–°–ü–†–ê–í–õ–ï–ù–û
    )
   
    await callback.answer("‚úÖ –ú–∞—Å—Ç–µ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω!")
# Shuningdek cancel_manual_ uchun ham STATE SETSIZ handler qo'shing:
@router.callback_query(F.data.startswith("cancel_manual_"), AdminStates.manual_master_selection)
async def cancel_manual_assignment_with_state(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏"""
    await state.clear()
    await callback.message.answer(
        "‚ö†Ô∏è –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –±–µ–∑ –º–∞—Å—Ç–µ—Ä–∞. –°–∏—Å—Ç–µ–º–∞ –ø–æ–ø—Ä–æ–±—É–µ—Ç –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–∑–∂–µ.",
        reply_markup=admin_main_kb()
    )
    await callback.answer()
@router.callback_query(F.data.startswith("cancel_manual_"))
async def cancel_manual_assignment_no_state(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –ø–æ—Å–ª–µ –æ—Ç–∫–∞–∑–∞ –º–∞—Å—Ç–µ—Ä–∞"""
    await callback.message.edit_text(
        "‚ùå –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n"
        "–ó–∞—è–≤–∫–∞ –æ—Å—Ç–∞–ª–∞—Å—å –±–µ–∑ –º–∞—Å—Ç–µ—Ä–∞."
    )
    await callback.answer()
# ==================== –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ ====================
@router.message(F.text == "üìã –ó–∞—è–≤–∫–∏")
async def list_orders(msg: Message, state: FSMContext):
    await state.clear() # Ensure state is cleared for menu actions
    kb = filters_kb()
    await msg.answer("üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä:", reply_markup=kb)
@router.callback_query(F.data.startswith("filter_"))
async def filter_orders(callback: CallbackQuery, order_service: OrderService):
    filter_type = callback.data.split("_")[1]
   
    if filter_type == "all":
        orders = await order_service.get_orders_by_filter()
    elif filter_type == "new":
        orders = await order_service.get_orders_by_filter(status=OrderStatus.new)
    elif filter_type == "work":
        orders = await order_service.get_orders_by_filter(
            status=OrderStatus.in_progress
        )
    elif filter_type == "done":
        orders = await order_service.get_orders_by_filter(
            status=OrderStatus.completed
        )
    else:
        orders = []
   
    if not orders:
        await callback.message.edit_text(
            f"üìã –ù–µ—Ç –∑–∞—è–≤–æ–∫ ({filter_type})",
            reply_markup=filters_kb()
        )
        await callback.answer()
        return
   
    text = f"üìã –ó–∞—è–≤–∫–∏ ({filter_type}):\n\n"
    builder = InlineKeyboardBuilder()
   
    for order in orders[:10]:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Å—Ç–µ—Ä–µ
        assignment = await order_service.assignment_repo.get_by_order(order.id)
        assigned_master = assignment.master.name if assignment and assignment.master else "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
       
        text += (
            f"#{order.number} - {order.client_name}\n"
            f"üîß –¢–∏–ø: {order.type} {order.brand} {order.model}\n"
            f"üë§ –ú–∞—Å—Ç–µ—Ä: {assigned_master}\n"
            f"–°—Ç–∞—Ç—É—Å: {order.status.value}\n"
            f"üìÖ –í—Ä–µ–º—è: {order.datetime.strftime('%d.%m.%Y %H:%M')}\n"
            f"üìç –ê–¥—Ä–µ—Å: {order.address}\n"
            f"üí¨ –ü—Ä–æ–±–ª–µ–º–∞: {order.comment[:50]}{'...' if len(order.comment) > 50 else ''}\n\n"
        )
       
        # –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –Ω–µ–∑–∞–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
        if assigned_master == "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω" and order.status in [OrderStatus.new, OrderStatus.rejected]:
            builder.row(
                InlineKeyboardButton(
                    text=f"üë§ –ù–∞–∑–Ω–∞—á–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞ #{order.number}",
                    callback_data=f"assign_order_{order.id}"
                )
            )
   
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    builder.row(
        InlineKeyboardButton(text="üìã –í—Å–µ", callback_data="filter_all"),
        InlineKeyboardButton(text="üÜï –ù–æ–≤—ã–µ", callback_data="filter_new")
    )
    builder.row(
        InlineKeyboardButton(text="‚öôÔ∏è –í —Ä–∞–±–æ—Ç–µ", callback_data="filter_work"),
        InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤—ã–µ", callback_data="filter_done")
    )
   
    markup = builder.as_markup()
   
    await callback.message.edit_text(text, reply_markup=markup)
    await callback.answer()
# –ù–û–í–û–ï: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π start_assign_existing_order handler
@router.callback_query(F.data.startswith("assign_order_"))
async def start_assign_existing_order(callback: CallbackQuery, state: FSMContext, order_service: OrderService):
    """–ù–∞—á–∞–ª–æ —Ä—É—á–Ω–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –Ω–µ–∑–∞–Ω—è—Ç–æ–π –∑–∞—è–≤–∫–∏"""
    order_id = int(callback.data.split("_")[2])
    order = await order_service.order_repo.get(order_id)
    if not order:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
   
    # –ò–ó–ú–ï–ù–ï–ù–û: –†–∞–∑—Ä–µ—à–∞–µ–º –Ω–∞–∑–Ω–∞—á–∞—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ, –Ω–æ –∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
    if order.status not in [OrderStatus.new, OrderStatus.rejected]:
        await callback.answer("‚ùå –ú–æ–∂–Ω–æ –Ω–∞–∑–Ω–∞—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏!", show_alert=True)
        return
   
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∑–Ω–∞—á–µ–Ω –ª–∏ —É–∂–µ
    assignment = await order_service.assignment_repo.get_by_order(order_id)
    if assignment:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞!", show_alert=True)
        return
   
    await state.update_data(
        order_id=order.id,
        order_number=order.number,
        order_datetime=order.datetime
    )
    await state.set_state(AdminStates.manual_master_selection)
   
    kb = await manual_master_selection_kb(order.id)
   
    # –ù–û–í–û–ï: –ë–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    status_text = "üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞" if order.status == OrderStatus.new else "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞"
   
    await callback.message.edit_text(
        f"{status_text}\n\n"
        f"üìã –ó–∞—è–≤–∫–∞ #{order.number}\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: {order.client_name}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.phone}\n"
        f"üìç –ê–¥—Ä–µ—Å: {order.address}\n"
        f"üìÖ –í—Ä–µ–º—è: {order.datetime.strftime('%d.%m.%Y %H:%M')}\n"
        f"üîß –¢–µ—Ö–Ω–∏–∫–∞: {order.type} {order.brand} {order.model}\n"
        f"üí¨ –ü—Ä–æ–±–ª–µ–º–∞: {order.comment}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:",
        reply_markup=kb
    )
    await callback.answer()
# ==================== –ú–∞—Å—Ç–µ—Ä–∞ –∏ –Ω–∞–≤—ã–∫–∏ ====================
@router.message(F.text == "üë• –ú–∞—Å—Ç–µ—Ä–∞ –∏ –Ω–∞–≤—ã–∫–∏")
async def masters_menu(msg: Message, state: FSMContext):
    await state.clear() # Ensure state is cleared for menu actions
    kb = masters_menu_kb()
    await msg.answer("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞–º–∏ –∏ –Ω–∞–≤—ã–∫–∞–º–∏:", reply_markup=kb)
@router.callback_query(F.data == "list_skills")
async def list_skills(callback: CallbackQuery, skill_service: SkillService):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞–≤—ã–∫–æ–≤"""
    skills = await skill_service.get_all_skills()
   
    if not skills:
        text = "üìö –ù–∞–≤—ã–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π!"
    else:
        text = "üìö –°–ø–∏—Å–æ–∫ –Ω–∞–≤—ã–∫–æ–≤:\n\n"
        for skill in skills:
            text += f"‚Ä¢ {skill.name}\n"
            if skill.description:
                text += f" {skill.description}\n"
   
    await callback.message.edit_text(text, reply_markup=masters_menu_kb())
    await callback.answer()
@router.callback_query(F.data == "add_skill")
async def add_skill_start(callback: CallbackQuery, state: FSMContext):
    await state.clear() # Clear previous states
    await state.set_state(AdminStates.adding_skill_name)
    await callback.message.edit_text("üìö –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–∞:")
    await callback.answer()
@router.message(AdminStates.adding_skill_name)
async def process_skill_name(msg: Message, state: FSMContext):
    await state.update_data(skill_name=msg.text.strip())
    await state.set_state(AdminStates.adding_skill_description)
    await msg.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
@router.message(AdminStates.adding_skill_description)
async def save_skill(msg: Message, state: FSMContext, skill_service: SkillService):
    data = await state.get_data()
    description = None if msg.text.strip() == "-" else msg.text.strip()
   
    skill = await skill_service.create_skill(
        name=data["skill_name"],
        description=description
    )
   
    await msg.answer(
        f"‚úÖ –ù–∞–≤—ã–∫ '{skill.name}' –¥–æ–±–∞–≤–ª–µ–Ω!",
        reply_markup=admin_main_kb()
    )
    await state.clear()
@router.callback_query(F.data == "list_masters")
async def list_masters(callback: CallbackQuery, master_service: MasterService):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤"""
    masters = await master_service.get_all_with_skills()
   
    if not masters:
        text = "üë• –ú–∞—Å—Ç–µ—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ!"
    else:
        text = "üë• –°–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤:\n\n"
        for master in masters:
            skills_text = ", ".join([s.name for s in master.skills]) if master.skills else "–ù–µ—Ç –Ω–∞–≤—ã–∫–æ–≤"
            status = "üü¢ –û–Ω–ª–∞–π–Ω" if master.is_online else "‚ö™ –û—Ñ—Ñ–ª–∞–π–Ω"
            text += (
                f"‚Ä¢ {master.name} {status}\n"
                f" ID: {master.telegram_id}\n"
                f" –ù–∞–≤—ã–∫–∏: {skills_text}\n\n"
            )
   
    await callback.message.edit_text(text, reply_markup=masters_menu_kb())
    await callback.answer()
@router.callback_query(F.data == "add_master")
async def add_master_start(callback: CallbackQuery, state: FSMContext):
    await state.clear() # Clear previous states
    await state.set_state(AdminStates.adding_master_name)
    await callback.message.edit_text("üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –º–∞—Å—Ç–µ—Ä–∞:")
    await callback.answer()
@router.message(AdminStates.adding_master_name)
async def process_master_name(msg: Message, state: FSMContext):
    await state.update_data(master_name=msg.text.strip())
    await state.set_state(AdminStates.adding_master_phone)
    await msg.answer("üìû –í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –º–∞—Å—Ç–µ—Ä–∞ (–∏–ª–∏ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
@router.message(AdminStates.adding_master_phone)
async def process_master_phone(msg: Message, state: FSMContext):
    phone = None if msg.text.strip() == "-" else msg.text.strip()
    await state.update_data(master_phone=phone)
    await state.set_state(AdminStates.adding_master_telegram)
    await msg.answer("üì± –í–≤–µ–¥–∏—Ç–µ Telegram ID –º–∞—Å—Ç–µ—Ä–∞ (—á–∏—Å–ª–æ):")
@router.message(AdminStates.adding_master_telegram)
async def process_master_telegram(msg: Message, state: FSMContext):
    try:
        telegram_id = int(msg.text.strip())
        await state.update_data(master_telegram_id=telegram_id)
        await state.set_state(AdminStates.adding_master_skills)
       
        kb = await skills_checkbox_kb()
        await msg.answer(
            "üîß –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–≤—ã–∫–∏ –º–∞—Å—Ç–µ—Ä–∞:",
            reply_markup=kb
        )
    except ValueError:
        await msg.answer("‚ùå Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
@router.callback_query(F.data.startswith("skill_toggle_"), AdminStates.adding_master_skills)
async def toggle_master_skill(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä–∞"""
    skill_id = int(callback.data.split("_")[2])
    data = await state.get_data()
    selected = data.get("selected_skills", [])
   
    if skill_id in selected:
        selected.remove(skill_id)
    else:
        selected.append(skill_id)
   
    await state.update_data(selected_skills=selected)
   
    kb = await skills_checkbox_kb(selected)
    await callback.message.edit_reply_markup(reply_markup=kb)
    await callback.answer()
@router.callback_query(F.data == "skills_done", AdminStates.adding_master_skills)
async def save_master(callback: CallbackQuery, state: FSMContext, master_service: MasterService):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ —Å –Ω–∞–≤—ã–∫–∞–º–∏"""
    data = await state.get_data()
   
    master_data = await master_service.create_master(
        name=data["master_name"],
        telegram_id=data["master_telegram_id"],
        phone=data.get("master_phone"),
        skill_ids=data.get("selected_skills", [])
    )
   
    # –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ–º —Å–æ —Å–ª–æ–≤–∞—Ä—ë–º, –∞ –Ω–µ ORM –æ–±—ä–µ–∫—Ç–æ–º
    skills_text = ", ".join([s["name"] for s in master_data["skills"]]) if master_data["skills"] else "–±–µ–∑ –Ω–∞–≤—ã–∫–æ–≤"
   
    await callback.message.edit_text(
        f"‚úÖ –ú–∞—Å—Ç–µ—Ä {master_data['name']} –¥–æ–±–∞–≤–ª–µ–Ω!\n"
        f"–ù–∞–≤—ã–∫–∏: {skills_text}"
    )
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_main_kb()
    )
    await callback.answer()
    await state.clear()
# ==================== –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ ====================
@router.callback_query(F.data == "update_master")
async def update_master_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞"""
    await state.clear()
    await state.set_state(AdminStates.selecting_master_to_update)
    kb = await master_update_selection_kb()
    await callback.message.edit_text(
        "üë§ –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:",
        reply_markup=kb
    )
    await callback.answer()
@router.callback_query(F.data.startswith("select_update_"), AdminStates.selecting_master_to_update)
async def select_master_to_update(callback: CallbackQuery, state: FSMContext, master_service: MasterService):
    """–í—ã–±–æ—Ä –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    master_id = int(callback.data.split("_")[2])
    master = await master_service.master_repo.get_with_skills(master_id)
    if not master:
        await callback.answer("‚ùå –ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
   
    await state.update_data(master_id=master_id, current_name=master.name, current_phone=master.phone, current_telegram=master.telegram_id)
    selected_skills = [s.id for s in master.skills] if master.skills else []
    await state.update_data(selected_skills=selected_skills)
   
    text = (
        f"üë§ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞: {master.name}\n\n"
        f"–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n"
        f"üìù –ò–º—è: {master.name}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {master.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üì± Telegram ID: {master.telegram_id}\n"
        f"üîß –ù–∞–≤—ã–∫–∏: {', '.join([s.name for s in master.skills]) or '–ù–µ—Ç'}\n\n"
        f"–ß—Ç–æ –æ–±–Ω–æ–≤–∏—Ç—å? (–∏–ª–∏ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞)"
    )
   
    kb = master_update_menu_kb()
   
    await callback.message.edit_text(text, reply_markup=kb)
    await callback.answer()
@router.callback_query(F.data == "update_name", AdminStates.selecting_master_to_update)
async def update_master_name_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.updating_master_name)
    await callback.message.edit_text("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –º–∞—Å—Ç–µ—Ä–∞:")
    await callback.answer()
@router.message(AdminStates.updating_master_name)
async def process_update_master_name(msg: Message, state: FSMContext):
    await state.update_data(new_name=msg.text.strip())
    await state.set_state(AdminStates.selecting_master_to_update)
    await msg.answer("‚úÖ –ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –º–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
@router.callback_query(F.data == "update_phone", AdminStates.selecting_master_to_update)
async def update_master_phone_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.updating_master_phone)
    await callback.message.edit_text("üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω (–∏–ª–∏ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
    await callback.answer()
@router.message(AdminStates.updating_master_phone)
async def process_update_master_phone(msg: Message, state: FSMContext):
    phone = None if msg.text.strip() == "-" else msg.text.strip()
    if phone and not validate_phone(phone):
        await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    await state.update_data(new_phone=phone)
    await state.set_state(AdminStates.selecting_master_to_update)
    await msg.answer("‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω.")
@router.callback_query(F.data == "update_telegram", AdminStates.selecting_master_to_update)
async def update_master_telegram_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.updating_master_telegram)
    await callback.message.edit_text("üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π Telegram ID (—á–∏—Å–ª–æ):")
    await callback.answer()
@router.message(AdminStates.updating_master_telegram)
async def process_update_master_telegram(msg: Message, state: FSMContext):
    try:
        telegram_id = int(msg.text.strip())
        await state.update_data(new_telegram=telegram_id)
        await state.set_state(AdminStates.selecting_master_to_update)
        await msg.answer("‚úÖ Telegram ID –æ–±–Ω–æ–≤–ª–µ–Ω.")
    except ValueError:
        await msg.answer("‚ùå –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
@router.callback_query(F.data == "update_skills", AdminStates.selecting_master_to_update)
async def update_master_skills_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.updating_master_skills)
    data = await state.get_data()
    selected = data.get("selected_skills", [])
    kb = await skills_checkbox_kb(selected)
    await callback.message.edit_text("üîß –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –º–∞—Å—Ç–µ—Ä–∞:", reply_markup=kb)
    await callback.answer()
@router.callback_query(F.data.startswith("skill_toggle_"), AdminStates.updating_master_skills)
async def toggle_update_master_skill(callback: CallbackQuery, state: FSMContext):
    skill_id = int(callback.data.split("_")[2])
    data = await state.get_data()
    selected = data.get("selected_skills", [])
   
    if skill_id in selected:
        selected.remove(skill_id)
    else:
        selected.append(skill_id)
   
    await state.update_data(selected_skills=selected)
   
    kb = await skills_checkbox_kb(selected)
    await callback.message.edit_reply_markup(reply_markup=kb)
    await callback.answer()
@router.callback_query(F.data == "skills_done", AdminStates.updating_master_skills)
async def finish_update_skills(callback: CallbackQuery, state: FSMContext, master_service: MasterService):
    data = await state.get_data()
    master_id = data.get("master_id")
    skill_ids = data.get("selected_skills", [])
   
    if master_id:
        await master_service.update_skills(master_id, skill_ids)
   
    await state.set_state(AdminStates.selecting_master_to_update)
    await callback.message.edit_text("‚úÖ –ù–∞–≤—ã–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –º–µ–Ω—é.")
    await callback.answer()
@router.callback_query(F.data == "save_update", AdminStates.selecting_master_to_update)
async def save_master_update(callback: CallbackQuery, state: FSMContext, master_service: MasterService):
    data = await state.get_data()
    master_id = data["master_id"]
   
    name = data.get("new_name", data.get("current_name"))
    phone = data.get("new_phone", data.get("current_phone"))
    telegram_id = data.get("new_telegram", data.get("current_telegram"))
    skill_ids = data.get("selected_skills", [])
   
    await master_service.update_master(
        master_id=master_id,
        name=name,
        phone=phone,
        telegram_id=telegram_id
    )
    await master_service.update_skills(master_id, skill_ids)
   
    await callback.message.edit_text(f"‚úÖ –ú–∞—Å—Ç–µ—Ä {name} –æ–±–Ω–æ–≤–ª–µ–Ω!")
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_main_kb())
    await state.clear()
    await callback.answer()
# ==================== –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ ====================
@router.callback_query(F.data == "delete_master")
async def delete_master_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞"""
    await state.clear()
    await state.set_state(AdminStates.selecting_master_to_delete)
    kb = await master_delete_selection_kb()
    await callback.message.edit_text(
        "üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=kb
    )
    await callback.answer()
@router.callback_query(F.data.startswith("select_delete_"), AdminStates.selecting_master_to_delete)
async def select_master_to_delete(callback: CallbackQuery, state: FSMContext, master_service: MasterService):
    """–í—ã–±–æ—Ä –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    master_id = int(callback.data.split("_")[2])
    master = await master_service.master_repo.get(master_id)
    if not master:
        await callback.answer("‚ùå –ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
   
    await state.update_data(master_id=master_id, master_name=master.name)
   
    kb = master_delete_confirm_kb(master_id)
   
    await callback.message.edit_text(
        f"üóëÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞ '{master.name}'?\n"
        f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!",
        reply_markup=kb
    )
    await state.set_state(AdminStates.confirming_delete)
    await callback.answer()
@router.callback_query(F.data.startswith("confirm_delete_"), AdminStates.confirming_delete)
async def confirm_delete_master(callback: CallbackQuery, state: FSMContext, master_service: MasterService):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è"""
    master_id = int(callback.data.split("_")[2])
    success = await master_service.delete_master(master_id)
   
    data = await state.get_data()
    if success:
        await callback.message.edit_text(f"‚úÖ –ú–∞—Å—Ç–µ—Ä '{data['master_name']}' —É–¥–∞–ª–µ–Ω!")
    else:
        await callback.message.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞ '{data['master_name']}'!")
   
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_main_kb())
    await state.clear()
    await callback.answer()
@router.callback_query(F.data == "masters_cancel")
async def cancel_master_action(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –º–∞—Å—Ç–µ—Ä–∞–º–∏"""
    await state.clear()
    await callback.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=masters_menu_kb())
    await callback.answer()
# ==================== –û—Ç—á–µ—Ç—ã ====================
@router.message(F.text == "üìä –û—Ç—á–µ—Ç—ã")
async def reports_menu(msg: Message, state: FSMContext):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤"""
    await state.clear()
    kb = reports_menu_kb()
    await msg.answer("üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:", reply_markup=kb)
@router.callback_query(F.data == "report_financial")
async def start_financial_report(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    await state.update_data(report_type="financial")
    await state.set_state(AdminStates.selecting_period)
    kb = period_selection_kb()
    await callback.message.edit_text("üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=kb)
    await callback.answer()
@router.callback_query(F.data == "report_masters")
async def start_masters_report(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –º–∞—Å—Ç–µ—Ä–∞–º"""
    await state.update_data(report_type="masters")
    await state.set_state(AdminStates.selecting_period)
    kb = period_selection_kb()
    await callback.message.edit_text("üë• –û—Ç—á–µ—Ç –ø–æ –º–∞—Å—Ç–µ—Ä–∞–º. –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=kb)
    await callback.answer()
@router.callback_query(F.data == "report_orders")
async def start_orders_report(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –∑–∞–∫–∞–∑–∞–º"""
    await state.update_data(report_type="orders")
    await state.set_state(AdminStates.selecting_period)
    kb = period_selection_kb()
    await callback.message.edit_text("üìã –û—Ç—á–µ—Ç –ø–æ –∑–∞–∫–∞–∑–∞–º. –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=kb)
    await callback.answer()
@router.callback_query(F.data == "export_all")
async def export_all_data(callback: CallbackQuery, state: FSMContext, report_service: ReportService, bot: Bot):
    """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ Excel"""
    await state.clear()
   
    try:
        await callback.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
       
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        export_data = await report_service.get_all_export_data()
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ª–∏—Å—Ç–∞–º–∏
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            for sheet_name, df in export_data.items():
                df.to_excel(writer, sheet_name=sheet_name, index=False)
        output.seek(0)
        filename = f"all_data_export_{date.today().strftime('%Y%m%d')}.xlsx"
        document = BufferedInputFile(file=output.getvalue(), filename=filename)
       
        await bot.send_document(
            callback.from_user.id,
            document,
            caption=(
                "üì§ –ü–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö:\n\n"
                "üìã –ó–∞–∫–∞–∑—ã - –≤—Å–µ –∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏, –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ä–∞–±–æ—Ç –∏ —Ñ–æ—Ç–æ\n"
                "üë• –ú–∞—Å—Ç–µ—Ä–∞ - –º–∞—Å—Ç–µ—Ä–∞ —Å –Ω–∞–≤—ã–∫–∞–º–∏ –∏ –∏—Ç–æ–≥–æ–≤—ã–º–∏ —Ä–∞—Å—á–µ—Ç–∞–º–∏"
            )
        )
        await callback.message.edit_text("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ Excel!")
        await callback.answer("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
       
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
@router.callback_query(F.data.startswith("period_"), AdminStates.selecting_period)
async def select_period(callback: CallbackQuery, state: FSMContext, report_service: ReportService):
    """–í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
    period = callback.data.split("_")[1]
    data = await state.get_data()
    report_type = data.get("report_type")
    if period == "today":
        date_from = date.today()
        date_to = date_from
        period_text = "—Å–µ–≥–æ–¥–Ω—è"
    elif period == "week":
        date_from = date.today() - timedelta(days=7)
        date_to = date.today()
        period_text = "–Ω–µ–¥–µ–ª—é"
    elif period == "month":
        date_from = date.today().replace(day=1)
        date_to = date.today()
        period_text = "–º–µ—Å—è—Ü"
    elif period == "all":
        date_from = None
        date_to = None
        period_text = "–≤–µ—Å—å –ø–µ—Ä–∏–æ–¥"
    elif period == "custom":
        await state.set_state(AdminStates.waiting_date_from)
        await callback.message.edit_text("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ (YYYY-MM-DD):")
        await callback.answer()
        return
    else:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥!")
        return
    await state.update_data(date_from=date_from, date_to=date_to, period=period_text)
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    if report_type == "financial":
        report = await report_service.get_financial_report(date_from, date_to)
        text = (
            f"üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç ({period_text}):\n\n"
            f"üìä –ó–∞–∫–∞–∑–æ–≤: {report['orders_count']}\n"
            f"üíµ –í—ã—Ä—É—á–∫–∞: {report['total_revenue']:.2f} ‚ÇΩ\n"
            f"üí∏ –†–∞—Å—Ö–æ–¥—ã: {report['total_expenses']:.2f} ‚ÇΩ\n"
            f"üìà –ü—Ä–∏–±—ã–ª—å: {report['total_profit']:.2f} ‚ÇΩ\n"
            f"üìâ –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: {report['average_profit']:.2f} ‚ÇΩ\n"
        )
    elif report_type == "masters":
        report = await report_service.get_masters_report(date_from, date_to)
        text = f"üë• –û—Ç—á–µ—Ç –ø–æ –º–∞—Å—Ç–µ—Ä–∞–º ({period_text}):\n\n"
        for master_name, stats in report.items():
            text += f"{master_name}: {stats['orders_count']} –∑–∞–∫–∞–∑–æ–≤, –ø—Ä–∏–±—ã–ª—å {stats['total_profit']:.2f} ‚ÇΩ\n"
    elif report_type == "orders":
        report = await report_service.get_orders_report(date_from, date_to)
        text = f"üìã –û—Ç—á–µ—Ç –ø–æ –∑–∞–∫–∞–∑–∞–º ({period_text}):\n\n"
        for order in report:
            text += f"#{order.number}: {order.profit:.2f} ‚ÇΩ\n"
    else:
        text = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—Ç—á–µ—Ç–∞!"
    kb = InlineKeyboardBuilder()
    kb.row(InlineKeyboardButton(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç Excel (–ø–æ–ª–Ω—ã–π)", callback_data=f"export_{report_type}_{period}"))
    kb.row(InlineKeyboardButton(text="üîô –ö –æ—Ç—á–µ—Ç–∞–º", callback_data="back_to_reports"))
    await callback.message.edit_text(text, reply_markup=kb.as_markup())
    await callback.answer()
@router.message(AdminStates.waiting_date_from)
async def process_date_from(msg: Message, state: FSMContext):
    try:
        date_from = datetime.strptime(msg.text.strip(), "%Y-%m-%d").date()
        await state.update_data(date_from=date_from)
        await state.set_state(AdminStates.waiting_date_to)
        await msg.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è (YYYY-MM-DD):")
    except ValueError:
        await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 2025-10-01")
@router.message(AdminStates.waiting_date_to)
async def process_date_to_and_generate(msg: Message, state: FSMContext, report_service: ReportService):
    try:
        date_to = datetime.strptime(msg.text.strip(), "%Y-%m-%d").date()
        data = await state.get_data()
        date_from = data["date_from"]
        report_type = data["report_type"]
        period_text = "–ø–µ—Ä–∏–æ–¥"
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –≤—ã—à–µ)
        if report_type == "financial":
            report = await report_service.get_financial_report(date_from, date_to)
            text = (
                f"üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç ({period_text}):\n\n"
                f"üìä –ó–∞–∫–∞–∑–æ–≤: {report['orders_count']}\n"
                f"üíµ –í—ã—Ä—É—á–∫–∞: {report['total_revenue']:.2f} ‚ÇΩ\n"
                f"üí∏ –†–∞—Å—Ö–æ–¥—ã: {report['total_expenses']:.2f} ‚ÇΩ\n"
                f"üìà –ü—Ä–∏–±—ã–ª—å: {report['total_profit']:.2f} ‚ÇΩ\n"
                f"üìâ –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: {report['average_profit']:.2f} ‚ÇΩ\n"
            )
        elif report_type == "masters":
            report = await report_service.get_masters_report(date_from, date_to)
            text = f"üë• –û—Ç—á–µ—Ç –ø–æ –º–∞—Å—Ç–µ—Ä–∞–º ({period_text}):\n\n"
            for master_name, stats in report.items():
                text += f"{master_name}: {stats['orders_count']} –∑–∞–∫–∞–∑–æ–≤, –ø—Ä–∏–±—ã–ª—å {stats['total_profit']:.2f} ‚ÇΩ\n"
        elif report_type == "orders":
            report = await report_service.get_orders_report(date_from, date_to)
            text = f"üìã –û—Ç—á–µ—Ç –ø–æ –∑–∞–∫–∞–∑–∞–º ({period_text}):\n\n"
            for order in report:
                text += f"#{order.number}: {order.profit:.2f} ‚ÇΩ\n"
        kb = InlineKeyboardBuilder()
        kb.row(InlineKeyboardButton(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç Excel (–ø–æ–ª–Ω—ã–π)", callback_data=f"export_{report_type}_custom"))
        kb.row(InlineKeyboardButton(text="üîô –ö –æ—Ç—á–µ—Ç–∞–º", callback_data="back_to_reports"))
        await msg.answer(text, reply_markup=kb.as_markup())
        await state.update_data(date_to=date_to, period=period_text)
    except ValueError:
        await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 2025-10-15")
    await state.clear()
@router.callback_query(F.data.startswith("export_"))
async def export_report(callback: CallbackQuery, state: FSMContext, report_service: ReportService, bot: Bot):
    """–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ Excel"""
    data_parts = callback.data.split("_")
    report_type = data_parts[1]
    period = "_".join(data_parts[2:]) # today, week, month, all, custom
    state_data = await state.get_data()
    date_from = state_data.get("date_from")
    date_to = state_data.get("date_to")
    if report_type == "financial":
        df = await report_service.get_financial_export_data(date_from, date_to)
        sheet_name = "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç"
    elif report_type == "masters":
        df = await report_service.get_masters_export_data(date_from, date_to)
        sheet_name = "–û—Ç—á–µ—Ç –ø–æ –º–∞—Å—Ç–µ—Ä–∞–º"
    elif report_type == "orders":
        df = await report_service.get_orders_export_data(date_from, date_to)
        sheet_name = "–û—Ç—á–µ—Ç –ø–æ –∑–∞–∫–∞–∑–∞–º"
    else:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—Ç—á–µ—Ç–∞!", show_alert=True)
        return
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel —Å pandas
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, sheet_name=sheet_name, index=False)
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if report_type == "financial":
            summary_df = pd.DataFrame({
                "–ò—Ç–æ–≥–æ": ["–í—ã—Ä—É—á–∫–∞", "–†–∞—Å—Ö–æ–¥—ã", "–ü—Ä–∏–±—ã–ª—å"],
                "–°—É–º–º–∞": [df["–í—ã—Ä—É—á–∫–∞"].sum(), df["–†–∞—Å—Ö–æ–¥—ã"].sum(), df["–ü—Ä–∏–±—ã–ª—å"].sum()]
            })
            summary_df.to_excel(writer, sheet_name="–ò—Ç–æ–≥–∏", index=False)
    output.seek(0)
    filename = f"{report_type}_{period}_full.xlsx"
    document = BufferedInputFile(file=output.getvalue(), filename=filename)
    await bot.send_document(
        callback.from_user.id,
        document,
        caption=f"üì§ –ü–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞: {report_type} ({period})"
    )
    await callback.answer("‚úÖ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ Excel!")
@router.callback_query(F.data == "back_to_reports")
async def back_to_reports(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    kb = reports_menu_kb()
    await callback.message.edit_text("üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:", reply_markup=kb)
    await callback.answer()
@router.callback_query(F.data == "back_to_main")
async def back_to_main_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_main_kb()
    )
    await callback.answer()
