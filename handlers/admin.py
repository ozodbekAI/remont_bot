from datetime import datetime, date, timedelta
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, BufferedInputFile, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
import pandas as pd
import io
from core.keyboards import (
    admin_main_kb, order_assignment_choice_kb, master_selection_kb,
    filters_kb, masters_menu_kb, skills_checkbox_kb, order_status_kb,
    reports_menu_kb, period_selection_kb
)
from core.utils import validate_phone
from services.order_service import OrderService
from services.master_service import MasterService
from services.skill_service import SkillService
from services.report_service import ReportService
from models import OrderStatus
from filters.role import RoleFilter
from config import ADMIN_IDS

router = Router()

# ==================== FSM States ====================
class AdminStates(StatesGroup):
    waiting_client_name = State()
    waiting_phone = State()
    waiting_address = State()
    waiting_datetime = State()
    waiting_skills = State()
    waiting_type = State()
    waiting_brand = State()
    waiting_model = State()
    waiting_comment = State()
    waiting_manual_master = State()

    adding_skill_name = State()
    adding_skill_description = State()

    adding_master_name = State()
    adding_master_phone = State()
    adding_master_telegram = State()
    adding_master_skills = State()

    selecting_master_to_update = State()
    updating_master_name = State()
    updating_master_phone = State()
    updating_master_telegram = State()
    updating_master_skills = State()

    selecting_master_to_delete = State()
    confirming_delete = State()

    selecting_order_to_assign = State()
    selecting_master_to_assign = State()

    selecting_report_type = State()
    selecting_period = State()
    waiting_date_from = State()
    waiting_date_to = State()

    selecting_filter = State()
    selecting_master_for_filter = State()
    viewing_order_details = State()
    confirming_order_delete = State()

# ==================== Helper Keyboard Functions ====================
async def master_update_selection_kb(master_service: MasterService) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    builder = InlineKeyboardBuilder()
    masters = await master_service.get_all_with_skills()
    for master in masters:
        builder.row(
            InlineKeyboardButton(
                text=f"{master.name} (ID: {master.telegram_id})",
                callback_data=f"select_update_{master.id}"
            )
        )
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="masters_cancel"))
    return builder.as_markup()

async def master_delete_selection_kb(master_service: MasterService) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    builder = InlineKeyboardBuilder()
    masters = await master_service.get_all_with_skills()
    for master in masters:
        builder.row(
            InlineKeyboardButton(
                text=f"{master.name} (ID: {master.telegram_id})",
                callback_data=f"select_delete_{master.id}"
            )
        )
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="masters_cancel"))
    return builder.as_markup()

def master_update_menu_kb() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞"""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üìù –ò–º—è", callback_data="update_name"),
        InlineKeyboardButton(text="üìû –¢–µ–ª–µ—Ñ–æ–Ω", callback_data="update_phone")
    )
    builder.row(
        InlineKeyboardButton(text="üì± Telegram ID", callback_data="update_telegram"),
        InlineKeyboardButton(text="üîß –ù–∞–≤—ã–∫–∏", callback_data="update_skills")
    )
    builder.row(
        InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_update"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_update")
    )
    return builder.as_markup()

def master_delete_confirm_kb(master_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞"""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_delete_{master_id}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="masters_cancel")
    )
    return builder.as_markup()

def order_delete_confirm_kb(order_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data=f"confirm_order_delete_{order_id}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_order_delete")
    )
    return builder.as_markup()

async def masters_filter_kb(master_service: MasterService) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤"""
    builder = InlineKeyboardBuilder()
    masters = await master_service.get_all_with_skills()
    for master in masters:
        builder.row(
            InlineKeyboardButton(
                text=f"{master.name} (ID: {master.telegram_id})",
                callback_data=f"filter_master_{master.id}"
            )
        )
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º", callback_data="back_to_filters"))
    return builder.as_markup()

# ==================== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ====================
@router.message(F.text == "/start", RoleFilter("admin"))
async def admin_start(msg: Message, state: FSMContext):
    await state.clear()
    await msg.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_main_kb()
    )

# ==================== –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ====================
@router.message(F.text == "üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞")
async def new_order_start(msg: Message, state: FSMContext):
    await state.clear()
    await state.set_state(AdminStates.waiting_client_name)
    await msg.answer("üìù –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:")

@router.message(AdminStates.waiting_client_name)
async def process_client_name(msg: Message, state: FSMContext):
    await state.update_data(client_name=msg.text.strip())
    await state.set_state(AdminStates.waiting_phone)
    await msg.answer("üìû –í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: +998901234567):")

@router.message(AdminStates.waiting_phone)
async def process_phone(msg: Message, state: FSMContext):
    phone = msg.text.strip()
    if not validate_phone(phone):
        await msg.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
            "–ü—Ä–∏–º–µ—Ä: +998901234567\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        return
    await state.update_data(phone=phone)
    await state.set_state(AdminStates.waiting_address)
    await msg.answer("üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:")

@router.message(AdminStates.waiting_address)
async def process_address(msg: Message, state: FSMContext):
    await state.update_data(address=msg.text.strip())
    await state.set_state(AdminStates.waiting_datetime)
    await msg.answer(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤–∏–∑–∏—Ç–∞\n"
        "–§–æ—Ä–º–∞—Ç: YYYY-MM-DD HH:MM\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 2025-10-15 14:00"
    )

@router.message(AdminStates.waiting_datetime)
async def process_datetime(msg: Message, state: FSMContext, skill_service: SkillService):
    dt_str = msg.text.strip()
    try:
        dt = datetime.strptime(dt_str, "%Y-%m-%d %H:%M")
        if dt < datetime.now():
            await msg.answer("‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        await state.update_data(datetime=dt)
        await state.set_state(AdminStates.waiting_skills)
        kb = await skills_checkbox_kb()
        await msg.answer(
            "üîß –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞–≤—ã–∫–∏ –¥–ª—è –∑–∞—è–≤–∫–∏:\n"
            "(–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ)",
            reply_markup=kb
        )
    except ValueError:
        await msg.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n"
            "–ü—Ä–∏–º–µ—Ä: 2025-10-15 14:00\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )

@router.callback_query(F.data.startswith("skill_toggle_"), AdminStates.waiting_skills)
async def toggle_order_skill(callback: CallbackQuery, state: FSMContext):
    skill_id = int(callback.data.split("_")[2])
    data = await state.get_data()
    selected = data.get("selected_skills", [])
    if skill_id in selected:
        selected.remove(skill_id)
    else:
        selected.append(skill_id)
    await state.update_data(selected_skills=selected)
    kb = await skills_checkbox_kb(selected)
    await callback.message.edit_reply_markup(reply_markup=kb)
    await callback.answer()

@router.callback_query(F.data == "skills_done", AdminStates.waiting_skills)
async def skills_done(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if not data.get("selected_skills"):
        await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –Ω–∞–≤—ã–∫!", show_alert=True)
        return
    await state.set_state(AdminStates.waiting_type)
    await callback.message.edit_text("üîß –í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏:")
    await callback.answer()

@router.message(AdminStates.waiting_type)
async def process_type(msg: Message, state: FSMContext):
    await state.update_data(type=msg.text.strip())
    await state.set_state(AdminStates.waiting_brand)
    await msg.answer("üè∑Ô∏è –í–≤–µ–¥–∏—Ç–µ –±—Ä–µ–Ω–¥:")

@router.message(AdminStates.waiting_brand)
async def process_brand(msg: Message, state: FSMContext):
    await state.update_data(brand=msg.text.strip())
    await state.set_state(AdminStates.waiting_model)
    await msg.answer("üì± –í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å:")

@router.message(AdminStates.waiting_model)
async def process_model(msg: Message, state: FSMContext):
    await state.update_data(model=msg.text.strip())
    await state.set_state(AdminStates.waiting_comment)
    await msg.answer("üí¨ –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:")

@router.message(AdminStates.waiting_comment)
async def create_order(msg: Message, state: FSMContext, order_service: OrderService):
    """–ó–∞—è–≤–∫–∞ —è—Ä–∞—Ç–∏—à –≤–∞ —Ç–∞–π–∏–Ω–ª–∞—à —É—Å—É–ª–∏–Ω–∏ —Ç–∞–Ω–ª–∞—à"""
    data = await state.get_data()
    comment = msg.text.strip()
    
    # –ó–∞—è–≤–∫–∞ —è—Ä–∞—Ç–∞–º–∏–∑
    order = await order_service.create_order(
        client_name=data["client_name"],
        phone=data["phone"],
        address=data["address"],
        datetime_obj=data["datetime"],
        type=data["type"],
        brand=data["brand"],
        model=data["model"],
        comment=comment,
        skill_ids=data.get("selected_skills", [])
    )
    
    await state.update_data(order_id=order.id)
    
    # –ò–∫–∫–∏ –≤–∞—Ä–∏–∞–Ω—Ç–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫—û—Ä—Å–∞—Ç–∞–º–∏–∑
    kb = order_assignment_choice_kb(order.id)
    
    await msg.answer(
        f"‚úÖ –ó–∞—è–≤–∫–∞ #{order.number} —Å–æ–∑–¥–∞–Ω–∞!\n\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: {order.client_name}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.phone}\n"
        f"üìç –ê–¥—Ä–µ—Å: {order.address}\n"
        f"üìÖ –í—Ä–µ–º—è: {order.datetime.strftime('%d.%m.%Y %H:%M')}\n"
        f"üîß –¢–µ—Ö–Ω–∏–∫–∞: {order.type} {order.brand} {order.model}\n"
        f"üí¨ –ü—Ä–æ–±–ª–µ–º–∞: {order.comment}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞:",
        reply_markup=kb
    )


@router.callback_query(F.data.startswith("auto_assign_"))
async def auto_assign_master(
    callback: CallbackQuery, 
    state: FSMContext,
    order_service: OrderService,
    master_service: MasterService,
    bot: Bot
):
    """–ê–≤—Ç–æ–º–∞—Ç–∏–∫ –º–∞—Å—Ç–µ—Ä —Ç–∞–π–∏–Ω–ª–∞—à"""
    order_id = int(callback.data.split("_")[2])
    
    data = await state.get_data()
    skill_ids = data.get("selected_skills", [])
    
    order = await order_service.order_repo.get(order_id)
    if not order:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return
    
    # –≠–Ω–≥ —è—Ö—à–∏ –º–∞—Å—Ç–µ—Ä–Ω–∏ —Ç–æ–ø–∞–º–∏–∑
    best_master = await master_service.auto_assign_best_master(order.datetime, skill_ids)
    
    if best_master:
        # –ú–∞—Å—Ç–µ—Ä–Ω–∏ —Ç–∞–π–∏–Ω–ª–∞–π–º–∏–∑ (—Å—Ç–∞—Ç—É—Å new, –≥—Ä–∞—Ñ–∏–∫ –ù–ï –±—Ä–æ–Ω–∏—Ä—É–µ–º)
        await order_service.assign_master_to_order(order.id, best_master.id)
        # –ù–ï –±—Ä–æ–Ω–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫ –∑–¥–µ—Å—å (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ confirm)
        
        await callback.message.edit_text(
            f"‚úÖ –ó–∞—è–≤–∫–∞ #{order.number} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞!\n\n"
            f"üë§ –ú–∞—Å—Ç–µ—Ä: {best_master.name}\n"
            f"üìã –ö–ª–∏–µ–Ω—Ç: {order.client_name}\n"
            f"üìÖ –í—Ä–µ–º—è: {order.datetime.strftime('%d.%m.%Y %H:%M')}"
        )
        
        # –ú–∞—Å—Ç–µ—Ä–≥–∞ —Ö–∞–±–∞—Ä —é–±–æ—Ä–∞–º–∏–∑ (NEW —Å—Ç–∞—Ç—É—Å–∏–¥–∞)
        await bot.send_message(
            best_master.telegram_id,
            f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{order.number}!\n\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {order.client_name}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.phone}\n"
            f"üìç –ê–¥—Ä–µ—Å: {order.address}\n"
            f"üìÖ –í—Ä–µ–º—è: {order.datetime.strftime('%d.%m.%Y %H:%M')}\n"
            f"üîß –¢–µ—Ö–Ω–∏–∫–∞: {order.type} {order.brand} {order.model}\n"
            f"üí¨ –ü—Ä–æ–±–ª–µ–º–∞: {order.comment}",
            reply_markup=order_status_kb(order.id, OrderStatus.new)
        )
        
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_main_kb())
        await state.clear()
    else:
        await callback.answer(
            "‚ö†Ô∏è –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è!",
            show_alert=True
        )
    
    await callback.answer()


@router.callback_query(F.data.startswith("manual_assign_choice_"))
async def manual_assign_choice(
    callback: CallbackQuery,
    state: FSMContext,
    order_service: OrderService,
    master_service: MasterService
):
    """“ö—û–ª–¥–∞ –º–∞—Å—Ç–µ—Ä —Ç–∞–Ω–ª–∞—à –±–æ—à–ª–∞—à"""
    order_id = int(callback.data.split("_")[3])
    
    data = await state.get_data()
    skill_ids = data.get("selected_skills", [])
    
    order = await order_service.order_repo.get(order_id)
    if not order:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return
    
    # –ú–æ—Å –º–∞—Å—Ç–µ—Ä–ª–∞—Ä–Ω–∏ —Ç–æ–ø–∞–º–∏–∑
    suitable_masters = await master_service.find_suitable_masters(order.datetime, skill_ids)
    
    if suitable_masters:
        # –ú–æ—Å –º–∞—Å—Ç–µ—Ä–ª–∞—Ä –±–æ—Ä
        kb = master_selection_kb(suitable_masters, order_id)
        await callback.message.edit_text(
            f"üìã –í—ã–±–æ—Ä –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ #{order.number}\n"
            f"üìÖ –í—Ä–µ–º—è: {order.datetime.strftime('%d.%m.%Y %H:%M')}\n\n"
            f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–∞—Å—Ç–µ—Ä–æ–≤: {len(suitable_masters)}\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞:",
            reply_markup=kb
        )
    else:
        # –ú–æ—Å –º–∞—Å—Ç–µ—Ä –π—û“õ - –±–∞—Ä—á–∞ –º–∞—Å—Ç–µ—Ä–ª–∞—Ä–Ω–∏ –∫—û—Ä—Å–∞—Ç–∞–º–∏–∑
        all_masters = await master_service.get_all_masters_with_today_count()
        
        kb = master_selection_kb(all_masters, order_id, show_all=True)
        await callback.message.edit_text(
            f"‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ {order.datetime.strftime('%d.%m.%Y %H:%M')}\n\n"
            f"üìã –ó–∞—è–≤–∫–∞ #{order.number}\n"
            f"–ü–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ –º–∞—Å—Ç–µ—Ä–∞ (–º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–Ω—è—Ç—ã):",
            reply_markup=kb
        )
    
    await state.set_state(AdminStates.waiting_manual_master)
    await callback.answer()


@router.callback_query(F.data.startswith("select_master_"), AdminStates.waiting_manual_master)
async def manual_assign_master(
    callback: CallbackQuery,
    state: FSMContext,
    order_service: OrderService,
    master_service: MasterService,
    bot: Bot
):
    """–¢–∞–Ω–ª–∞–Ω–≥–∞–Ω –º–∞—Å—Ç–µ—Ä–Ω–∏ —Ç–∞–π–∏–Ω–ª–∞—à"""
    parts = callback.data.split("_")
    master_id = int(parts[2])
    order_id = int(parts[3])
    
    master = await master_service.master_repo.get(master_id)
    order = await order_service.order_repo.get(order_id)
    
    if not master or not order:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ú–∞—Å—Ç–µ—Ä –∏–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!", show_alert=True)
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
        existing_assignment = await order_service.assignment_repo.get_by_order(order_id)
        old_master_id = existing_assignment.master_id if existing_assignment else None
        
        # –¢–∞–π–∏–Ω–ª–∞–π–º–∏–∑
        await order_service.assign_master_to_order(order_id, master_id)
        # –ù–ï –±—Ä–æ–Ω–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫ –∑–¥–µ—Å—å (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ confirm –º–∞—Å—Ç–µ—Ä–∞)
        
        # –ï—Å–ª–∏ –±—ã–ª —Å—Ç–∞—Ä—ã–π –º–∞—Å—Ç–µ—Ä, —É–≤–µ–¥–æ–º–ª—è–µ–º –µ–≥–æ –æ–± –æ—Ç–º–µ–Ω–µ
        if old_master_id and old_master_id != master_id:
            old_master = await master_service.master_repo.get(old_master_id)
            if old_master:
                await bot.send_message(
                    old_master.telegram_id,
                    f"‚ùå –ó–∞—è–≤–∫–∞ #{order.number} –±—ã–ª–∞ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥—Ä—É–≥–æ–º—É –º–∞—Å—Ç–µ—Ä—É."
                )
        
        await callback.message.edit_text(
            f"‚úÖ –ú–∞—Å—Ç–µ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω!\n\n"
            f"üë§ –ú–∞—Å—Ç–µ—Ä: {master.name}\n"
            f"üìã –ó–∞—è–≤–∫–∞: #{order.number}\n"
            f"üìÖ –í—Ä–µ–º—è: {order.datetime.strftime('%d.%m.%Y %H:%M')}"
        )
        
        # –ú–∞—Å—Ç–µ—Ä–≥–∞ —Ö–∞–±–∞—Ä
        await bot.send_message(
            master.telegram_id,
            f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{order.number}!\n\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {order.client_name}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.phone}\n"
            f"üìç –ê–¥—Ä–µ—Å: {order.address}\n"
            f"üìÖ –í—Ä–µ–º—è: {order.datetime.strftime('%d.%m.%Y %H:%M')}\n"
            f"üîß –¢–µ—Ö–Ω–∏–∫–∞: {order.type} {order.brand} {order.model}\n"
            f"üí¨ –ü—Ä–æ–±–ª–µ–º–∞: {order.comment}",
            reply_markup=order_status_kb(order.id, OrderStatus.new)
        )
        
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_main_kb())
        await state.clear()
        
    except ValueError as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
    
    await callback.answer()


@router.callback_query(F.data.startswith("cancel_assignment_"))
async def cancel_assignment(
    callback: CallbackQuery,
    state: FSMContext,
    order_service: OrderService
):
    """–¢–∞–π–∏–Ω–ª–∞—à–Ω–∏ –±–µ–∫–æ—Ä “õ–∏–ª–∏—à"""
    order_id = int(callback.data.split("_")[2])
    order = await order_service.order_repo.get(order_id)
    
    if not order:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return
    
    await callback.message.edit_text(
        f"‚ùå –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∑–∞—è–≤–∫–∏ #{order.number} –æ—Ç–º–µ–Ω–µ–Ω–æ."
    )
    
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_main_kb())
    await state.clear()
    await callback.answer()

# ==================== –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ ====================
@router.message(F.text == "üìã –ó–∞—è–≤–∫–∏")
async def list_orders(msg: Message, state: FSMContext):
    await state.clear()
    kb = filters_kb()
    await msg.answer("üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä:", reply_markup=kb)

@router.callback_query(F.data.startswith("filter_master_"), AdminStates.selecting_master_for_filter)
async def filter_orders_by_master(callback: CallbackQuery, order_service: OrderService, state: FSMContext):
    master_id = int(callback.data.split("_")[2])
    
    orders = await order_service.get_orders_by_master(master_id)
    
    if not orders:
        await callback.message.edit_text(
            "üìã –ù–µ—Ç –∑–∞—è–≤–æ–∫ —É —ç—Ç–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞",
            reply_markup=filters_kb()
        )
        await state.clear()
        await callback.answer()
        return
    
    text = "üìã –ó–∞—è–≤–∫–∏ –º–∞—Å—Ç–µ—Ä–∞:\n\n"
    builder = InlineKeyboardBuilder()
    
    for order in orders:
        text += (
            f"#{order.number} - {order.client_name}\n"
            f"üîß –¢–∏–ø: {order.type} {order.brand} {order.model}\n"
            f"–°—Ç–∞—Ç—É—Å: {order.status.value}\n"
            f"üìÖ –í—Ä–µ–º—è: {order.datetime.strftime('%d.%m.%Y %H:%M')}\n"
            f"üìç –ê–¥—Ä–µ—Å: {order.address}\n\n"
        )
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞—è–≤–∫–∏
        row_buttons = []
        if order.status == OrderStatus.new or order.status == OrderStatus.rejected:
            row_buttons.append(InlineKeyboardButton(text="–ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å", callback_data=f"assign_order_{order.id}"))
        row_buttons.append(InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏", callback_data=f"view_order_{order.id}"))
        row_buttons.append(InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_order_{order.id}"))
        builder.row(*row_buttons)
    
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º", callback_data="back_to_filters"))
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await state.clear()
    await callback.answer()

@router.callback_query(F.data.startswith("filter_"))
async def filter_orders(callback: CallbackQuery, order_service: OrderService, master_service: MasterService, state: FSMContext):
    filter_type = callback.data.split("_")[1]
    
    if filter_type == "all":
        orders = await order_service.order_repo.get_all(limit=50)
        title = "–í—Å–µ –∑–∞—è–≤–∫–∏"
    elif filter_type == "new":
        orders = await order_service.get_orders_by_filter(status=OrderStatus.new)
        title = "–ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏"
    elif filter_type == "confirmed":
        orders = await order_service.get_orders_by_filter(status=OrderStatus.confirmed)
        title = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏"
    elif filter_type == "work":
        orders = await order_service.get_orders_by_filter(status=OrderStatus.in_progress)
        title = "–í —Ä–∞–±–æ—Ç–µ"
    elif filter_type == "arrived":
        orders = await order_service.get_orders_by_filter(status=OrderStatus.arrived)
        title = "–ú–∞—Å—Ç–µ—Ä –Ω–∞ –º–µ—Å—Ç–µ"
    elif filter_type == "done":
        orders = await order_service.get_orders_by_filter(status=OrderStatus.completed)
        title = "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ"
    elif filter_type == "rejected":
        orders = await order_service.get_orders_by_filter(status=OrderStatus.rejected)
        title = "–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ"
    elif filter_type == "today":
        from datetime import date
        orders = await order_service.order_repo.get_by_date_range(
            date.today(), 
            date.today()
        )
        title = "–ó–∞—è–≤–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"
    elif filter_type == "bymaster":
        print("Filter by master selected")
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
        kb = await masters_filter_kb(master_service)
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –µ–≥–æ –∑–∞—è–≤–æ–∫:", reply_markup=kb)
        await state.set_state(AdminStates.selecting_master_for_filter)
        await callback.answer()
        return
    else:
        orders = []
        title = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä"
    
    if not orders:
        await callback.message.edit_text(
            f"üìã –ù–µ—Ç –∑–∞—è–≤–æ–∫ ({title.lower()})",
            reply_markup=filters_kb()
        )
        await callback.answer()
        return
    
    text = f"üìã {title}:\n\n"
    builder = InlineKeyboardBuilder()
    
    for order in orders:
        assignment = await order_service.assignment_repo.get_by_order(order.id)
        assigned_master = assignment.master.name if assignment and assignment.master else "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
        text += (
            f"#{order.number} - {order.client_name}\n"
            f"üîß –¢–∏–ø: {order.type} {order.brand} {order.model}\n"
            f"üë§ –ú–∞—Å—Ç–µ—Ä: {assigned_master}\n"
            f"–°—Ç–∞—Ç—É—Å: {order.status.value}\n"
            f"üìÖ –í—Ä–µ–º—è: {order.datetime.strftime('%d.%m.%Y %H:%M')}\n"
            f"üìç –ê–¥—Ä–µ—Å: {order.address}\n\n"
        )
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞—è–≤–∫–∏
        row_buttons = []
        if order.status == OrderStatus.new or order.status == OrderStatus.rejected:
            row_buttons.append(InlineKeyboardButton(text="–ù–∞–∑–Ω–∞—á–∏—Ç—å/–ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å", callback_data=f"assign_order_{order.id}"))
        row_buttons.append(InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏", callback_data=f"view_order_{order.id}"))
        row_buttons.append(InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_order_{order.id}"))
        builder.row(*row_buttons)
    
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º", callback_data="back_to_filters"))
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()



@router.callback_query(F.data.startswith("view_order_"))
async def view_order_details(callback: CallbackQuery, order_service: OrderService, state: FSMContext):
    order_id = int(callback.data.split("_")[2])
    order = await order_service.order_repo.get_with_skills(order_id)
    if not order:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return
    
    assignment = await order_service.assignment_repo.get_by_order(order_id)
    master_name = assignment.master.name if assignment else "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
    
    skills = ", ".join([s.name for s in order.required_skills]) if order.required_skills else "–ù–µ—Ç"
    
    text = (
        f"üìã –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞—è–≤–∫–∏ #{order.number}\n\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: {order.client_name}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.phone}\n"
        f"üìç –ê–¥—Ä–µ—Å: {order.address}\n"
        f"üìÖ –í—Ä–µ–º—è: {order.datetime.strftime('%d.%m.%Y %H:%M')}\n"
        f"üîß –¢–µ—Ö–Ω–∏–∫–∞: {order.type} {order.brand} {order.model}\n"
        f"üí¨ –ü—Ä–æ–±–ª–µ–º–∞: {order.comment}\n"
        f"üë§ –ú–∞—Å—Ç–µ—Ä: {master_name}\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {order.status.value}\n"
        f"üõ† –ù–∞–≤—ã–∫–∏: {skills}\n"
    )
    
    if order.status == OrderStatus.completed:
        text += (
            f"\nüìù –†–∞–±–æ—Ç—ã: {order.work_description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üí∞ –°—É–º–º–∞: {order.work_amount:.2f} ‚ÇΩ\n"
            f"üíµ –†–∞—Å—Ö–æ–¥—ã: {order.expenses:.2f} ‚ÇΩ\n"
            f"üíé –ü—Ä–∏–±—ã–ª—å: {order.profit:.2f} ‚ÇΩ\n"
            f"üì∏ –§–æ—Ç–æ: {len(order.work_photos or [])}"
        )
    
    builder = InlineKeyboardBuilder()
    if order.status in [OrderStatus.new, OrderStatus.rejected]:
        builder.row(InlineKeyboardButton(text="–ù–∞–∑–Ω–∞—á–∏—Ç—å/–ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å", callback_data=f"assign_order_{order.id}"))
    builder.row(InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_order_{order.id}"))
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_filters"))
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()

@router.callback_query(F.data.startswith("delete_order_"))
async def confirm_order_delete(callback: CallbackQuery, state: FSMContext, order_service: OrderService):
    order_id = int(callback.data.split("_")[2])
    order = await order_service.order_repo.get(order_id)
    if not order:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return
    
    await state.update_data(delete_order_id=order_id)
    await state.set_state(AdminStates.confirming_order_delete)
    
    kb = order_delete_confirm_kb(order_id)
    await callback.message.edit_text(
        f"üóë –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É #{order.number}?\n"
        f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!",
        reply_markup=kb
    )
    await callback.answer()

@router.callback_query(F.data.startswith("confirm_order_delete_"), AdminStates.confirming_order_delete)
async def perform_order_delete(callback: CallbackQuery, state: FSMContext, order_service: OrderService, master_service: MasterService, bot: Bot):
    data = await state.get_data()
    order_id = data["delete_order_id"]
    
    order = await order_service.order_repo.get(order_id)
    if not order:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
    assignment = await order_service.assignment_repo.get_by_order(order_id)
    master_id = assignment.master_id if assignment else None
    
    # –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑ (—É–¥–∞–ª—è–µ—Ç –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ)
    success = await order_service.delete_order(order_id)
    
    if success:
        # –ï—Å–ª–∏ –±—ã–ª –º–∞—Å—Ç–µ—Ä –∏ —Å—Ç–∞—Ç—É—Å –±—ã–ª confirmed –∏–ª–∏ –≤—ã—à–µ, –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        if master_id and order.status in [OrderStatus.confirmed, OrderStatus.in_progress, OrderStatus.arrived]:
            await master_service.update_schedule(master_id, order.datetime, "–æ—Ç–¥–∞–Ω –¥—Ä—É–≥–æ–º—É –º–≤—Å—Ç–µ—Ä—É")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–∞—Å—Ç–µ—Ä–∞, –µ—Å–ª–∏ –±—ã–ª –Ω–∞–∑–Ω–∞—á–µ–Ω
        if master_id:
            master = await master_service.master_repo.get(master_id)
            if master:
                await bot.send_message(
                    master.telegram_id,
                    f"‚ùå –ó–∞—è–≤–∫–∞ #{order.number} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                )
        
        await callback.message.edit_text(f"‚úÖ –ó–∞—è–≤–∫–∞ #{order.number} —É–¥–∞–ª–µ–Ω–∞!")
    else:
        await callback.message.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É #{order.number}!")

    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_main_kb())
    await state.clear()
    await callback.answer()

@router.callback_query(F.data == "cancel_order_delete", AdminStates.confirming_order_delete)
async def cancel_order_delete(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=filters_kb())
    await callback.answer()

@router.callback_query(F.data.startswith("assign_order_"))
async def start_assign_existing_order(callback: CallbackQuery, state: FSMContext, order_service: OrderService, master_service: MasterService):
    order_id = int(callback.data.split("_")[2])
    order = await order_service.order_repo.get_with_skills(order_id)
    if not order:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return
    
    await state.update_data(order_id=order_id)
    await state.set_state(AdminStates.selecting_master_to_assign)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –≤–º–µ—Å—Ç–æ find_suitable_masters
    skill_ids = [s.id for s in order.required_skills] if order.required_skills else []
    masters = await master_service.get_masters_for_assignment(order.datetime, skill_ids)
    
    if not masters:
        await callback.message.edit_text(
            f"üìã –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ #{order.number}\n"
            f"üìÖ –í—Ä–µ–º—è: {order.datetime.strftime('%d.%m.%Y %H:%M')}\n\n"
            f"‚ö†Ô∏è –ú–∞—Å—Ç–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤.",
            reply_markup=None
        )
        await callback.answer()
        return
    
    kb = master_selection_kb(masters, order_id)  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ kb –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await callback.message.edit_text(
        f"üìã –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ/–ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ #{order.number}\n"
        f"üìÖ –í—Ä–µ–º—è: {order.datetime.strftime('%d.%m.%Y %H:%M')}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞:",
        reply_markup=kb
    )
    await callback.answer()

@router.callback_query(F.data.startswith("select_master_"))
async def assign_selected_master(callback: CallbackQuery, state: FSMContext, order_service: OrderService, master_service: MasterService, bot: Bot):
    _, _, order_id_str, master_id_str = callback.data.split("_")
    order_id = int(order_id_str)
    master_id = int(master_id_str)
    
    master = await master_service.master_repo.get(master_id)
    if not master:
        await callback.message.edit_text(
            f"‚ùå –ú–∞—Å—Ç–µ—Ä —Å ID {master_id} –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞.",
            reply_markup=None
        )
        await callback.answer(show_alert=True)
        return
    
    # –ù–∞–∑–Ω–∞—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ confirmed!)
    order = await order_service.assign_master_to_order(order_id, master_id)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–∞—Å—Ç–µ—Ä–∞ —Å OrderStatus.new
    await bot.send_message(
        master.telegram_id,
        f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{order.number} –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –≤–∞–º!\n\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: {order.client_name}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.phone}\n"
        f"üìç –ê–¥—Ä–µ—Å: {order.address}\n"
        f"üìÖ –í—Ä–µ–º—è: {order.datetime.strftime('%d.%m.%Y %H:%M')}\n"
        f"üîß –¢–µ—Ö–Ω–∏–∫–∞: {order.type} {order.brand} {order.model}\n"
        f"üí¨ –ü—Ä–æ–±–ª–µ–º–∞: {order.comment}\n\n"
        f"–ü—Ä–∏–Ω—è—Ç—å –∏–ª–∏ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è?",
        reply_markup=order_status_kb(order.id, OrderStatus.new)
    )
    
    await callback.message.edit_text(
        f"‚úÖ –ú–∞—Å—Ç–µ—Ä {master.name} –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –∑–∞—è–≤–∫—É #{order.number}. –û–∂–∏–¥–∞–µ—Ç –ø—Ä–∏–Ω—è—Ç–∏—è.",
        reply_markup=None
    )
    await state.clear()
    await callback.answer()

# ==================== –ú–∞—Å—Ç–µ—Ä–∞ –∏ –Ω–∞–≤—ã–∫–∏ ====================
@router.message(F.text == "üë• –ú–∞—Å—Ç–µ—Ä–∞ –∏ –Ω–∞–≤—ã–∫–∏")
async def masters_menu(msg: Message, state: FSMContext):
    await state.clear()
    kb = masters_menu_kb()
    await msg.answer("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞–º–∏ –∏ –Ω–∞–≤—ã–∫–∞–º–∏:", reply_markup=kb)

@router.callback_query(F.data == "list_skills")
async def list_skills(callback: CallbackQuery, skill_service: SkillService):
    skills = await skill_service.get_all_skills()
    if not skills:
        text = "üìö –ù–∞–≤—ã–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π!"
    else:
        text = "üìö –°–ø–∏—Å–æ–∫ –Ω–∞–≤—ã–∫–æ–≤:\n\n"
        for skill in skills:
            text += f"‚Ä¢ {skill.name}\n"
            if skill.description:
                text += f"  {skill.description}\n"
    await callback.message.edit_text(text, reply_markup=masters_menu_kb())
    await callback.answer()

@router.callback_query(F.data == "add_skill")
async def add_skill_start(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await state.set_state(AdminStates.adding_skill_name)
    await callback.message.edit_text("üìö –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–∞:")
    await callback.answer()

@router.message(AdminStates.adding_skill_name)
async def process_skill_name(msg: Message, state: FSMContext, skill_service: SkillService):
    skill_name = msg.text.strip()
    existing_skill = await skill_service.get_skill_by_name(skill_name)
    if existing_skill:
        await msg.answer("‚ùå –ù–∞–≤—ã–∫ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        return
    await state.update_data(skill_name=skill_name)
    await state.set_state(AdminStates.adding_skill_description)
    await msg.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")

@router.message(AdminStates.adding_skill_description)
async def save_skill(msg: Message, state: FSMContext, skill_service: SkillService):
    data = await state.get_data()
    description = None if msg.text.strip() == "-" else msg.text.strip()
    skill = await skill_service.create_skill(
        name=data["skill_name"],
        description=description
    )
    await msg.answer(
        f"‚úÖ –ù–∞–≤—ã–∫ '{skill.name}' –¥–æ–±–∞–≤–ª–µ–Ω!",
        reply_markup=admin_main_kb()
    )
    await state.clear()

@router.callback_query(F.data == "list_masters")
async def list_masters(callback: CallbackQuery, master_service: MasterService):
    masters = await master_service.get_all_with_skills()
    if not masters:
        text = "üë• –ú–∞—Å—Ç–µ—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ!"
    else:
        text = "üë• –°–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤:\n\n"
        for master in masters:
            skills_text = ", ".join([s.name for s in master.skills]) if master.skills else "–ù–µ—Ç –Ω–∞–≤—ã–∫–æ–≤"
            status = "üü¢ –û–Ω–ª–∞–π–Ω" if getattr(master, 'is_online', False) else "‚ö™ –û—Ñ—Ñ–ª–∞–π–Ω"
            text += (
                f"‚Ä¢ {master.name} {status}\n"
                f"  ID: {master.telegram_id}\n"
                f"  –¢–µ–ª–µ—Ñ–æ–Ω: {master.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"  –ù–∞–≤—ã–∫–∏: {skills_text}\n\n"
            )
    await callback.message.edit_text(text, reply_markup=masters_menu_kb())
    await callback.answer()

@router.callback_query(F.data == "add_master")
async def add_master_start(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await state.set_state(AdminStates.adding_master_name)
    await callback.message.edit_text("üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –º–∞—Å—Ç–µ—Ä–∞:")
    await callback.answer()

@router.message(AdminStates.adding_master_name)
async def process_master_name(msg: Message, state: FSMContext):
    await state.update_data(master_name=msg.text.strip())
    await state.set_state(AdminStates.adding_master_phone)
    await msg.answer("üìû –í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –º–∞—Å—Ç–µ—Ä–∞ (–∏–ª–∏ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")

@router.message(AdminStates.adding_master_phone)
async def process_master_phone(msg: Message, state: FSMContext):
    phone = None if msg.text.strip() == "-" else msg.text.strip()
    if phone and not validate_phone(phone):
        await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    await state.update_data(master_phone=phone)
    await state.set_state(AdminStates.adding_master_telegram)
    await msg.answer("üì± –í–≤–µ–¥–∏—Ç–µ Telegram ID –º–∞—Å—Ç–µ—Ä–∞ (—á–∏—Å–ª–æ):")

@router.message(AdminStates.adding_master_telegram)
async def process_master_telegram(msg: Message, state: FSMContext, master_service: MasterService):
    try:
        telegram_id = int(msg.text.strip())
        existing_master = await master_service.master_repo.get_by_telegram_id(telegram_id)
        if existing_master:
            await msg.answer("‚ùå –≠—Ç–æ—Ç Telegram ID —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –º–∞—Å—Ç–µ—Ä–æ–º!")
            return
        await state.update_data(master_telegram_id=telegram_id)
        await state.set_state(AdminStates.adding_master_skills)
        kb = await skills_checkbox_kb()
        await msg.answer(
            "üîß –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–≤—ã–∫–∏ –º–∞—Å—Ç–µ—Ä–∞:",
            reply_markup=kb
        )
    except ValueError:
        await msg.answer("‚ùå Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")

@router.callback_query(F.data.startswith("skill_toggle_"), AdminStates.adding_master_skills)
async def toggle_master_skill(callback: CallbackQuery, state: FSMContext):
    skill_id = int(callback.data.split("_")[2])
    data = await state.get_data()
    selected = data.get("selected_skills", [])
    if skill_id in selected:
        selected.remove(skill_id)
    else:
        selected.append(skill_id)
    await state.update_data(selected_skills=selected)
    kb = await skills_checkbox_kb(selected)
    await callback.message.edit_reply_markup(reply_markup=kb)
    await callback.answer()

@router.callback_query(F.data == "skills_done", AdminStates.adding_master_skills)
async def save_master(callback: CallbackQuery, state: FSMContext, master_service: MasterService):
    data = await state.get_data()
    if not data.get("selected_skills"):
        await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –Ω–∞–≤—ã–∫!", show_alert=True)
        return
    master_data = await master_service.create_master(
        name=data["master_name"],
        telegram_id=data["master_telegram_id"],
        phone=data.get("master_phone"),
        skill_ids=data.get("selected_skills", [])
    )
    skills_text = ", ".join([s["name"] for s in master_data["skills"]]) if master_data["skills"] else "–±–µ–∑ –Ω–∞–≤—ã–∫–æ–≤"
    await callback.message.edit_text(
        f"‚úÖ –ú–∞—Å—Ç–µ—Ä {master_data['name']} –¥–æ–±–∞–≤–ª–µ–Ω!\n"
        f"–ù–∞–≤—ã–∫–∏: {skills_text}"
    )
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_main_kb()
    )
    await state.clear()
    await callback.answer()

# ==================== –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ ====================
@router.callback_query(F.data == "update_master")
async def update_master_start(callback: CallbackQuery, state: FSMContext, master_service: MasterService):
    await state.clear()
    await state.set_state(AdminStates.selecting_master_to_update)
    kb = await master_update_selection_kb(master_service)
    await callback.message.edit_text(
        "üë§ –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:",
        reply_markup=kb
    )
    await callback.answer()

@router.callback_query(F.data.startswith("select_update_"), AdminStates.selecting_master_to_update)
async def select_master_to_update(callback: CallbackQuery, state: FSMContext, master_service: MasterService):
    master_id = int(callback.data.split("_")[2])
    master = await master_service.master_repo.get_with_skills(master_id)
    if not master:
        await callback.answer("‚ùå –ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    await state.update_data(master_id=master_id, current_name=master.name, current_phone=master.phone, current_telegram=master.telegram_id)
    selected_skills = [s.id for s in master.skills] if master.skills else []
    await state.update_data(selected_skills=selected_skills)
    text = (
        f"üë§ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞: {master.name}\n\n"
        f"–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n"
        f"üìù –ò–º—è: {master.name}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {master.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üì± Telegram ID: {master.telegram_id}\n"
        f"üîß –ù–∞–≤—ã–∫–∏: {', '.join([s.name for s in master.skills]) or '–ù–µ—Ç'}\n\n"
        f"–ß—Ç–æ –æ–±–Ω–æ–≤–∏—Ç—å?"
    )
    kb = master_update_menu_kb()
    await callback.message.edit_text(text, reply_markup=kb)
    await callback.answer()

@router.callback_query(F.data == "update_name", AdminStates.selecting_master_to_update)
async def update_master_name_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.updating_master_name)
    await callback.message.edit_text("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –º–∞—Å—Ç–µ—Ä–∞:")
    await callback.answer()

@router.message(AdminStates.updating_master_name)
async def process_update_master_name(msg: Message, state: FSMContext):
    await state.update_data(new_name=msg.text.strip())
    await state.set_state(AdminStates.selecting_master_to_update)
    await msg.answer("‚úÖ –ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=master_update_menu_kb())
    await msg.delete()

@router.callback_query(F.data == "update_phone", AdminStates.selecting_master_to_update)
async def update_master_phone_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.updating_master_phone)
    await callback.message.edit_text("üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω (–∏–ª–∏ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
    await callback.answer()

@router.message(AdminStates.updating_master_phone)
async def process_update_master_phone(msg: Message, state: FSMContext):
    phone = None if msg.text.strip() == "-" else msg.text.strip()
    if phone and not validate_phone(phone):
        await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    await state.update_data(new_phone=phone)
    await state.set_state(AdminStates.selecting_master_to_update)
    await msg.answer("‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω.", reply_markup=master_update_menu_kb())
    await msg.delete()

@router.callback_query(F.data == "update_telegram", AdminStates.selecting_master_to_update)
async def update_master_telegram_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.updating_master_telegram)
    await callback.message.edit_text("üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π Telegram ID (—á–∏—Å–ª–æ):")
    await callback.answer()

@router.message(AdminStates.updating_master_telegram)
async def process_update_master_telegram(msg: Message, state: FSMContext, master_service: MasterService):
    try:
        telegram_id = int(msg.text.strip())
        existing_master = await master_service.master_repo.get_by_telegram_id(telegram_id)
        data = await state.get_data()
        if existing_master and existing_master.id != data["master_id"]:
            await msg.answer("‚ùå –≠—Ç–æ—Ç Telegram ID —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –º–∞—Å—Ç–µ—Ä–æ–º!")
            return
        await state.update_data(new_telegram=telegram_id)
        await state.set_state(AdminStates.selecting_master_to_update)
        await msg.answer("‚úÖ Telegram ID –æ–±–Ω–æ–≤–ª–µ–Ω.", reply_markup=master_update_menu_kb())
        await msg.delete()
    except ValueError:
        await msg.answer("‚ùå –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")

@router.callback_query(F.data == "update_skills", AdminStates.selecting_master_to_update)
async def update_master_skills_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.updating_master_skills)
    data = await state.get_data()
    selected = data.get("selected_skills", [])
    kb = await skills_checkbox_kb(selected)
    await callback.message.edit_text("üîß –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –º–∞—Å—Ç–µ—Ä–∞:", reply_markup=kb)
    await callback.answer()

@router.callback_query(F.data.startswith("skill_toggle_"), AdminStates.updating_master_skills)
async def toggle_update_master_skill(callback: CallbackQuery, state: FSMContext):
    skill_id = int(callback.data.split("_")[2])
    data = await state.get_data()
    selected = data.get("selected_skills", [])
    if skill_id in selected:
        selected.remove(skill_id)
    else:
        selected.append(skill_id)
    await state.update_data(selected_skills=selected)
    kb = await skills_checkbox_kb(selected)
    await callback.message.edit_reply_markup(reply_markup=kb)
    await callback.answer()

@router.callback_query(F.data == "skills_done", AdminStates.updating_master_skills)
async def finish_update_skills(callback: CallbackQuery, state: FSMContext, master_service: MasterService):
    data = await state.get_data()
    master_id = data.get("master_id")
    skill_ids = data.get("selected_skills", [])
    if not skill_ids:
        await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –Ω–∞–≤—ã–∫!", show_alert=True)
        return
    if master_id:
        await master_service.update_skills(master_id, skill_ids)
    await state.set_state(AdminStates.selecting_master_to_update)
    await callback.message.edit_text("‚úÖ –ù–∞–≤—ã–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.", reply_markup=master_update_menu_kb())
    await callback.answer()

@router.callback_query(F.data == "save_update", AdminStates.selecting_master_to_update)
async def save_master_update(callback: CallbackQuery, state: FSMContext, master_service: MasterService):
    data = await state.get_data()
    master_id = data["master_id"]
    name = data.get("new_name", data.get("current_name"))
    phone = data.get("new_phone", data.get("current_phone"))
    telegram_id = data.get("new_telegram", data.get("current_telegram"))
    skill_ids = data.get("selected_skills", [])
    try:
        await master_service.update_master(
            master_id=master_id,
            name=name,
            phone=phone,
            telegram_id=telegram_id
        )
        await master_service.update_skills(master_id, skill_ids)
        await callback.message.edit_text(f"‚úÖ –ú–∞—Å—Ç–µ—Ä {name} –æ–±–Ω–æ–≤–ª–µ–Ω!")
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_main_kb())
        await state.clear()
    except ValueError as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
    await callback.answer()

@router.callback_query(F.data == "cancel_update", AdminStates.selecting_master_to_update)
async def cancel_master_update(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_main_kb())
    await state.clear()
    await callback.answer()

# ==================== –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ ====================
@router.callback_query(F.data == "delete_master")
async def delete_master_start(callback: CallbackQuery, state: FSMContext, master_service: MasterService):
    await state.clear()
    await state.set_state(AdminStates.selecting_master_to_delete)
    kb = await master_delete_selection_kb(master_service)
    await callback.message.edit_text(
        "üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=kb
    )
    await callback.answer()

@router.callback_query(F.data.startswith("select_delete_"), AdminStates.selecting_master_to_delete)
async def select_master_to_delete(callback: CallbackQuery, state: FSMContext, master_service: MasterService):
    master_id = int(callback.data.split("_")[2])
    master = await master_service.master_repo.get(master_id)
    if not master:
        await callback.answer("‚ùå –ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    await state.update_data(master_id=master_id, master_name=master.name)
    kb = master_delete_confirm_kb(master_id)
    await callback.message.edit_text(
        f"üóëÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞ '{master.name}'?\n"
        f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!",
        reply_markup=kb
    )
    await state.set_state(AdminStates.confirming_delete)
    await callback.answer()

@router.callback_query(F.data.startswith("confirm_delete_"), AdminStates.confirming_delete)
async def confirm_delete_master(callback: CallbackQuery, state: FSMContext, master_service: MasterService):
    master_id = int(callback.data.split("_")[2])
    success = await master_service.delete_master(master_id)
    data = await state.get_data()
    if success:
        await callback.message.edit_text(f"‚úÖ –ú–∞—Å—Ç–µ—Ä '{data['master_name']}' —É–¥–∞–ª–µ–Ω!")
    else:
        await callback.message.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞ '{data['master_name']}'!")
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_main_kb())
    await state.clear()
    await callback.answer()

@router.callback_query(F.data == "masters_cancel")
async def cancel_master_action(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=masters_menu_kb())
    await callback.answer()

# ==================== –û—Ç—á–µ—Ç—ã ====================
@router.message(F.text == "üìä –û—Ç—á–µ—Ç—ã")
async def reports_menu(msg: Message, state: FSMContext):
    await state.clear()
    kb = reports_menu_kb()
    await msg.answer("üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:", reply_markup=kb)

@router.callback_query(F.data == "report_financial")
async def start_financial_report(callback: CallbackQuery, state: FSMContext):
    await state.update_data(report_type="financial")
    await state.set_state(AdminStates.selecting_period)
    kb = period_selection_kb()
    await callback.message.edit_text("üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=kb)
    await callback.answer()

@router.callback_query(F.data == "report_masters")
async def start_masters_report(callback: CallbackQuery, state: FSMContext):
    await state.update_data(report_type="masters")
    await state.set_state(AdminStates.selecting_period)
    kb = period_selection_kb()
    await callback.message.edit_text("üë• –û—Ç—á–µ—Ç –ø–æ –º–∞—Å—Ç–µ—Ä–∞–º. –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=kb)
    await callback.answer()

@router.callback_query(F.data == "report_orders")
async def start_orders_report(callback: CallbackQuery, state: FSMContext):
    await state.update_data(report_type="orders")
    await state.set_state(AdminStates.selecting_period)
    kb = period_selection_kb()
    await callback.message.edit_text("üìã –û—Ç—á–µ—Ç –ø–æ –∑–∞–∫–∞–∑–∞–º. –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=kb)
    await callback.answer()

@router.callback_query(F.data == "export_all")
async def export_all_data(callback: CallbackQuery, state: FSMContext, report_service: ReportService, bot: Bot):
    await state.clear()
    try:
        await callback.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
        export_data = await report_service.get_all_export_data()
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            for sheet_name, df in export_data.items():
                df.to_excel(writer, sheet_name=sheet_name, index=False)
        output.seek(0)
        filename = f"all_data_export_{date.today().strftime('%Y%m%d')}.xlsx"
        document = BufferedInputFile(file=output.getvalue(), filename=filename)
        await bot.send_document(
            callback.from_user.id,
            document,
            caption=(
                "üì§ –ü–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö:\n\n"
                "üìã –ó–∞–∫–∞–∑—ã - –≤—Å–µ –∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏\n"
                "üë• –ú–∞—Å—Ç–µ—Ä–∞ - –º–∞—Å—Ç–µ—Ä–∞ —Å –Ω–∞–≤—ã–∫–∞–º–∏ –∏ –∏—Ç–æ–≥–∞–º–∏"
            )
        )
        await callback.message.edit_text("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ Excel!", reply_markup=admin_main_kb())
        await callback.answer()
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data.startswith("period_"), AdminStates.selecting_period)
async def select_period(callback: CallbackQuery, state: FSMContext, report_service: ReportService, bot: Bot):
    period = callback.data.split("_")[1]
    data = await state.get_data()
    report_type = data.get("report_type")
    
    if period == "today":
        date_from = date.today()
        date_to = date_from
        period_text = "—Å–µ–≥–æ–¥–Ω—è"
    elif period == "week":
        date_from = date.today() - timedelta(days=7)
        date_to = date.today()
        period_text = "–Ω–µ–¥–µ–ª—é"
    elif period == "month":
        date_from = date.today().replace(day=1)
        date_to = date.today()
        period_text = "–º–µ—Å—è—Ü"
    elif period == "all":
        date_from = None
        date_to = None
        period_text = "–≤–µ—Å—å –ø–µ—Ä–∏–æ–¥"
    elif period == "custom":
        await state.set_state(AdminStates.waiting_date_from)
        await callback.message.edit_text("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ (YYYY-MM-DD):")
        await callback.answer()
        return
    else:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥!", show_alert=True)
        return
    
    await state.update_data(date_from=date_from, date_to=date_to, period_text=period_text)
    
    if report_type == "financial":
        report = await report_service.get_financial_report(date_from, date_to)
        text = (
            f"üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç ({period_text}):\n\n"
            f"üìä –ó–∞–∫–∞–∑–æ–≤: {report['orders_count']}\n"
            f"üíµ –í—ã—Ä—É—á–∫–∞: {report['total_revenue']:.2f} ‚ÇΩ\n"
            f"üí∏ –†–∞—Å—Ö–æ–¥—ã: {report['total_expenses']:.2f} ‚ÇΩ\n"
            f"üìà –ü—Ä–∏–±—ã–ª—å: {report['total_profit']:.2f} ‚ÇΩ\n"
            f"üìâ –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: {report['average_profit']:.2f} ‚ÇΩ\n"
        )
        df = await report_service.get_financial_export_data(date_from, date_to)
        output = io.BytesIO()
        df.to_excel(output, index=False, engine='openpyxl')
        output.seek(0)
        filename = f"financial_report_{date.today().strftime('%Y%m%d')}.xlsx"
        document = BufferedInputFile(file=output.getvalue(), filename=filename)
        await bot.send_document(
            callback.from_user.id,
            document,
            caption=f"üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç ({period_text})"
        )
    elif report_type == "masters":
        report = await report_service.get_masters_report(date_from, date_to)
        text = f"üë• –û—Ç—á–µ—Ç –ø–æ –º–∞—Å—Ç–µ—Ä–∞–º ({period_text}):\n\n"
        for master_name, stats in report.items():
            text += f"{master_name}: {stats['orders_count']} –∑–∞–∫–∞–∑–æ–≤, –ø—Ä–∏–±—ã–ª—å {stats['total_profit']:.2f} ‚ÇΩ\n"
        df = await report_service.get_masters_export_data(date_from, date_to)
        output = io.BytesIO()
        df.to_excel(output, index=False, engine='openpyxl')
        output.seek(0)
        filename = f"masters_report_{date.today().strftime('%Y%m%d')}.xlsx"
        document = BufferedInputFile(file=output.getvalue(), filename=filename)
        await bot.send_document(
            callback.from_user.id,
            document,
            caption=f"üë• –û—Ç—á–µ—Ç –ø–æ –º–∞—Å—Ç–µ—Ä–∞–º ({period_text})"
        )
    elif report_type == "orders":
        report = await report_service.get_orders_report(date_from, date_to)
        text = f"üìã –û—Ç—á–µ—Ç –ø–æ –∑–∞–∫–∞–∑–∞–º ({period_text}):\n\n"
        for order in report:
            text += f"#{order.number}: {getattr(order, 'profit', 0):.2f} ‚ÇΩ\n"
        df = await report_service.get_orders_export_data(date_from, date_to)
        output = io.BytesIO()
        df.to_excel(output, index=False, engine='openpyxl')
        output.seek(0)
        filename = f"orders_report_{date.today().strftime('%Y%m%d')}.xlsx"
        document = BufferedInputFile(file=output.getvalue(), filename=filename)
        await bot.send_document(
            callback.from_user.id,
            document,
            caption=f"üìã –û—Ç—á–µ—Ç –ø–æ –∑–∞–∫–∞–∑–∞–º ({period_text})"
        )
    else:
        text = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—Ç—á–µ—Ç–∞!"
    
    await callback.message.edit_text(text, reply_markup=reports_menu_kb())
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_main_kb())
    await state.clear()
    await callback.answer()

@router.message(AdminStates.waiting_date_from)
async def process_date_from(msg: Message, state: FSMContext):
    try:
        date_from = datetime.strptime(msg.text.strip(), "%Y-%m-%d").date()
        if date_from > date.today():
            await msg.answer("‚ùå –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        await state.update_data(date_from=date_from)
        await state.set_state(AdminStates.waiting_date_to)
        await msg.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è (YYYY-MM-DD):")
    except ValueError:
        await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 2025-10-01")

@router.message(AdminStates.waiting_date_to)
async def process_date_to_and_generate(msg: Message, state: FSMContext, report_service: ReportService, bot: Bot):
    try:
        date_to = datetime.strptime(msg.text.strip(), "%Y-%m-%d").date()
        data = await state.get_data()
        date_from = data["date_from"]
        if date_to < date_from:
            await msg.answer("‚ùå –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        report_type = data["report_type"]
        period_text = f"{date_from.strftime('%Y-%m-%d')} - {date_to.strftime('%Y-%m-%d')}"
        
        if report_type == "financial":
            report = await report_service.get_financial_report(date_from, date_to)
            text = (
                f"üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç ({period_text}):\n\n"
                f"üìä –ó–∞–∫–∞–∑–æ–≤: {report['orders_count']}\n"
                f"üíµ –í—ã—Ä—É—á–∫–∞: {report['total_revenue']:.2f} ‚ÇΩ\n"
                f"üí∏ –†–∞—Å—Ö–æ–¥—ã: {report['total_expenses']:.2f} ‚ÇΩ\n"
                f"üìà –ü—Ä–∏–±—ã–ª—å: {report['total_profit']:.2f} ‚ÇΩ\n"
                f"üìâ –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: {report['average_profit']:.2f} ‚ÇΩ\n"
            )
            df = await report_service.get_financial_export_data(date_from, date_to)
            output = io.BytesIO()
            df.to_excel(output, index=False, engine='openpyxl')
            output.seek(0)
            filename = f"financial_report_{date.today().strftime('%Y%m%d')}.xlsx"
            document = BufferedInputFile(file=output.getvalue(), filename=filename)
            await bot.send_document(
                msg.from_user.id,
                document,
                caption=f"üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç ({period_text})"
            )
        elif report_type == "masters":
            report = await report_service.get_masters_report(date_from, date_to)
            text = f"üë• –û—Ç—á–µ—Ç –ø–æ –º–∞—Å—Ç–µ—Ä–∞–º ({period_text}):\n\n"
            for master_name, stats in report.items():
                text += f"{master_name}: {stats['orders_count']} –∑–∞–∫–∞–∑–æ–≤, –ø—Ä–∏–±—ã–ª—å {stats['total_profit']:.2f} ‚ÇΩ\n"
            df = await report_service.get_masters_export_data(date_from, date_to)
            output = io.BytesIO()
            df.to_excel(output, index=False, engine='openpyxl')
            output.seek(0)
            filename = f"masters_report_{date.today().strftime('%Y%m%d')}.xlsx"
            document = BufferedInputFile(file=output.getvalue(), filename=filename)
            await bot.send_document(
                msg.from_user.id,
                document,
                caption=f"üë• –û—Ç—á–µ—Ç –ø–æ –º–∞—Å—Ç–µ—Ä–∞–º ({period_text})"
            )
        elif report_type == "orders":
            report = await report_service.get_orders_report(date_from, date_to)
            text = f"üìã –û—Ç—á–µ—Ç –ø–æ –∑–∞–∫–∞–∑–∞–º ({period_text}):\n\n"
            for order in report:
                text += f"#{order.number}: {getattr(order, 'profit', 0):.2f} ‚ÇΩ\n"
            df = await report_service.get_orders_export_data(date_from, date_to)
            output = io.BytesIO()
            df.to_excel(output, index=False, engine='openpyxl')
            output.seek(0)
            filename = f"orders_report_{date.today().strftime('%Y%m%d')}.xlsx"
            document = BufferedInputFile(file=output.getvalue(), filename=filename)
            await bot.send_document(
                msg.from_user.id,
                document,
                caption=f"üìã –û—Ç—á–µ—Ç –ø–æ –∑–∞–∫–∞–∑–∞–º ({period_text})"
            )
        else:
            text = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—Ç—á–µ—Ç–∞!"
        
        await msg.answer(text, reply_markup=admin_main_kb())
        await state.clear()
    except ValueError:
        await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 2025-10-15")

# ==================== –û–±—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ====================
@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_main_kb()
    )
    await callback.answer()

@router.callback_query(F.data == "back_to_reports")
async def back_to_reports(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:",
        reply_markup=reports_menu_kb()
    )
    await callback.answer()

@router.callback_query(F.data == "back_to_filters")
async def back_to_filters(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä:",
        reply_markup=filters_kb()
    )
    await callback.answer()